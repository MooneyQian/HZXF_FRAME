<?xml version="1.0"?>
<doc>
    <assembly>
        <name>HS.MVCFramework.Framework</name>
    </assembly>
    <members>
        <member name="T:HS.MVCFramework.Framework.BaseAccess">
            <summary>
            数据表访问的基类
            </summary>
        </member>
        <member name="M:HS.MVCFramework.Framework.BaseAccess.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:HS.MVCFramework.Framework.BaseAccess.Dispose">
            <summary>
            释放数据访问连接,销毁资源
            </summary>
        </member>
        <member name="M:HS.MVCFramework.Framework.BaseAccess.#ctor(System.String)">
            <summary>
            构造方法
            </summary>
            <param name="configFileName"></param>
        </member>
        <member name="M:HS.MVCFramework.Framework.BaseAccess.#ctor(HS.MVCFramework.Framework.IRepository)">
            <summary>
            构造函数
            </summary>
            <param name="context">数据仓储操作上下文</param>
        </member>
        <member name="M:HS.MVCFramework.Framework.BaseAccess.Insert``1(``0,System.Boolean,System.Func{HS.MVCFramework.Framework.IRepository,System.Object,System.Boolean})">
            <summary>
            新增实体
            </summary>
            <param name="entity">实体</param>
            <param name="autoCommit">是否自动执行提交</param>
            <param name="tranActions">事务执行委托方法</param>
            <returns>实体标识</returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.BaseAccess.Update``1(``0,System.Boolean,System.Func{HS.MVCFramework.Framework.IRepository,System.Boolean})">
            <summary>
            更新实体
            </summary>
            <param name="entity">实体</param>
            <param name="autoCommit">是否自动执行提交</param>
            <param name="tranActions">事务执行委托方法</param>
        </member>
        <member name="M:HS.MVCFramework.Framework.BaseAccess.Update``1(System.String,System.Object,System.Boolean,System.Func{HS.MVCFramework.Framework.IRepository,System.Boolean})">
            <summary>
            部分更新实体
            </summary>
            <param name="id">标识</param>
            <param name="entity">部分实体,建议采用new { 参数1=值1 ..} 动态对象构造</param>
            <param name="autoCommit">是否自动执行提交</param>
            <param name="tranActions">事务执行委托方法</param>
        </member>
        <member name="M:HS.MVCFramework.Framework.BaseAccess.Update``1(``0,System.String[],HS.MVCFramework.Framework.ISpecification{``0},System.Boolean,System.Func{HS.MVCFramework.Framework.IRepository,System.Boolean})">
            <summary>
            【谨慎使用】根据条件批量更新表记录（请使用返回值检查执行的sql语句是否正确）
            </summary>
            <param name="entity">实体类型</param>
            <param name="updateValues">待更新的字段</param>
            <param name="specification">【谨慎】更新条件(仅支持简单条件)</param>
            <param name="autoCommit">是否自动执行提交</param>
            <param name="tranActions">事务执行委托方法</param>
            <returns>返回生成的sql语句，提供检查是否正确</returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.BaseAccess.Delete``1(``0,System.Boolean,System.Func{HS.MVCFramework.Framework.IRepository,System.Boolean})">
            <summary>
            删除实体
            </summary>
            <param name="entity">实体</param>
            <param name="autoCommit">是否自动执行提交</param>
            <param name="tranActions">事务执行委托方法</param>
        </member>
        <member name="M:HS.MVCFramework.Framework.BaseAccess.Delete``1(System.String[],System.Boolean,System.Func{HS.MVCFramework.Framework.IRepository,System.Boolean})">
            <summary>
            删除实体
            </summary>
            <param name="ids">实体编号列表</param>
            <param name="autoCommit">是否自动执行提交</param>
            <param name="tranActions">事务执行委托方法</param>
        </member>
        <member name="M:HS.MVCFramework.Framework.BaseAccess.Delete``1(System.String,System.Boolean,System.Func{HS.MVCFramework.Framework.IRepository,System.Boolean})">
            <summary>
            删除实体
            </summary>
            <param name="ids">实体编号列表</param>
            <param name="autoCommit">是否自动执行提交</param>
            <param name="tranActions">事务执行委托方法</param>
        </member>
        <member name="M:HS.MVCFramework.Framework.BaseAccess.Delete``1(System.Collections.Generic.List{``0},System.Boolean,System.Func{HS.MVCFramework.Framework.IRepository,System.Boolean})">
            <summary>
            删除实体
            </summary>
            <param name="entitys">数据库查询出的实体</param>
            <param name="autoCommit">是否自动执行提交</param>
            <param name="tranActions">事务执行委托方法</param>
        </member>
        <member name="M:HS.MVCFramework.Framework.BaseAccess.Single``1(System.String)">
            <summary>
            获取单条记录。
            </summary>
            <param name="id">实体编号</param>
            <returns>符合编号的实体</returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.BaseAccess.Single``1(HS.MVCFramework.Framework.ISpecification{``0})">
            <summary>
            根据条件获取单条记录。
            </summary>
            <param name="specification">查询条件</param>
            <returns>如果未找到则返回null,如果多条返回第一条</returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.BaseAccess.Single``1(HS.MVCFramework.Framework.ISpecification{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},HS.MVCFramework.Framework.SortOrder)">
            <summary>
            根据条件(排序)获取单条记录。
            </summary>
            <param name="specification">查询条件</param>
            <param name="sortPredicate">排序字段</param>
            <param name="sortOrder">排序方式</param>
            <returns>如果未找到则返回null,如果多条返回第一条</returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.BaseAccess.GetDBSchema``1(System.Collections.Generic.List{System.String})">
            <summary>
            根据连接字符串获取当前所有表
            </summary>
            <param name="listConfigFileName"></param>
            <returns></returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.BaseAccess.GetPage``1(HS.MVCFramework.Framework.PageInfo)">
            <summary>
            分页获取实体列表
            </summary>
            <param name="pi">分页器</param>
            <returns>实体列表</returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.BaseAccess.GetPage``1(HS.MVCFramework.Framework.PageInfo,HS.MVCFramework.Framework.ISpecification{``0})">
            <summary>
            分页获取实体列表
            </summary>
            <param name="pi">分页器</param>
            <param name="specification">查询条件</param>
            <returns>实体列表</returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.BaseAccess.GetPage``1(HS.MVCFramework.Framework.PageInfo,HS.MVCFramework.Framework.ISpecification{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},HS.MVCFramework.Framework.SortOrder)">
            <summary>
            分页获取列表
            </summary>
            <param name="pi">分页列表</param>
            <param name="specification">查询条件</param>
            <param name="sortPredicate">排序字段</param>
            <param name="sortOrder">排序方式</param>
            <returns>实体列表</returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.BaseAccess.GetPage``1(HS.MVCFramework.Framework.PageInfo,HS.MVCFramework.Framework.ISpecification{``0},System.Collections.Generic.List{HS.MVCFramework.Framework.Orderby{``0}})">
            <summary>
            分页获取列表
            </summary>
            <param name="pi">分页列表</param>
            <param name="specification">查询条件</param>
            <param name="sortOrders">排序组合列表</param>
            <returns>实体列表</returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.BaseAccess.GetAll``1">
            <summary>
            获取适合条件的所有记录列表
            </summary>
            <returns>实体列表</returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.BaseAccess.GetAll``1(System.String[])">
            <summary>
            根据主键数组获取对应记录列表
            </summary>
            <param name="idArray">主键数组</param>
            <returns>实体列表</returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.BaseAccess.GetAll``1(System.Collections.Generic.List{System.String})">
            <summary>
            根据主键数组获取对应记录列表
            </summary>
            <param name="idArray">主键数组</param>
            <returns>实体列表</returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.BaseAccess.GetAll``1(HS.MVCFramework.Framework.ISpecification{``0})">
            <summary>
            获取适合条件的所有记录列表
            </summary>
            <param name="specification">查询条件</param>
            <returns>实体列表</returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.BaseAccess.GetAll``1(HS.MVCFramework.Framework.ISpecification{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},HS.MVCFramework.Framework.SortOrder)">
            <summary>
            获取适合条件的所有记录列表，可以排序
            </summary>
            <param name="specification">查询条件</param>
            <param name="sortPredicate">排序字段</param>
            <param name="sortOrder">排序方式</param>
            <returns>实体列表</returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.BaseAccess.GetAll``1(HS.MVCFramework.Framework.ISpecification{``0},System.Collections.Generic.List{HS.MVCFramework.Framework.Orderby{``0}})">
            <summary>
            获取适合条件的所有记录列表，可以排序
            </summary>
            <param name="specification">查询条件</param>
            <param name="sortOrders">排序对象</param>
            <returns>实体列表</returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.BaseAccess.GetSingle``1(System.String)">
            <summary>
            获取单个或第一个数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.BaseAccess.GetSingle``1(HS.MVCFramework.Framework.ISpecification{``0})">
            <summary>
            获取单个或第一个数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="specification"></param>
            <returns></returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.BaseAccess.GetCount``1(HS.MVCFramework.Framework.ISpecification{``0})">
            <summary>
            获取数据条数
            </summary>
            <typeparam name="T"></typeparam>
            <param name="specification"></param>
            <returns></returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.BaseAccess.IsExists``1(HS.MVCFramework.Framework.ISpecification{``0})">
            <summary>
            判断数据是否存在
            </summary>
            <typeparam name="T"></typeparam>
            <param name="specification"></param>
            <returns></returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.BaseAccess.GetContext``1">
            <summary>
            返回未执行前的全部列表操作
            </summary>
            <returns>所有结果集枚举迭代器</returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.BaseAccess.GetContext``1(HS.MVCFramework.Framework.ISpecification{``0})">
            <summary>
            返回未执行前的获取操作
            </summary>
            <param name="specification">查询条件</param>
            <returns>符合条件的所有结果集枚举迭代器</returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.BaseAccess.Commit">
            <summary>
            提交事务
            </summary>
        </member>
        <member name="M:HS.MVCFramework.Framework.BaseAccess.Rollback">
            <summary>
            回滚事务
            </summary>
        </member>
        <member name="E:HS.MVCFramework.Framework.BaseAccess.OnBeforeChanged">
            <summary>
            定义修改事件
            </summary>
        </member>
        <member name="E:HS.MVCFramework.Framework.BaseAccess.OnAfterChanged">
            <summary>
            定义修改事件
            </summary>
        </member>
        <member name="P:HS.MVCFramework.Framework.BaseAccess.DbContext">
            <summary>
            定义数据库组件
            </summary>
        </member>
        <member name="T:HS.MVCFramework.Framework.BaseAccess.BeforeChanged">
            <summary>
            定义委托,在数据发生存储之前的委托
            </summary>
            <param name="changeType">变化类型：1新增 2修改 3删除</param>
            <param name="dbContext">数据访问上下文</param>
            <param name="entity">实体内容</param>
        </member>
        <member name="T:HS.MVCFramework.Framework.BaseAccess.AfterChanged">
            <summary>
            定义委托,在数据发生存储之后的委托
            </summary>
            <param name="changeType">变化类型:1新增 2修改 3删除</param>
            <param name="dbContext">数据访问上下文</param>
            <param name="entity">实体内容</param>
        </member>
        <member name="T:HS.MVCFramework.Framework.BaseFacade`1">
            <summary>
            Facade父类
            </summary>
            <typeparam name="P"></typeparam>
        </member>
        <member name="M:HS.MVCFramework.Framework.IBaseFacade.GetByID``1(System.String)">
            <summary>
            【基础方法】通过ID获取单个对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ID"></param>
            <returns></returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.IBaseFacade.GetAll``1">
            <summary>
            【基础方法】获取所有对象
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.IBaseFacade.GetPaged``1(HS.MVCFramework.Framework.PageInfo)">
            <summary>
            【基础方法】获取所有分页对象
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.IBaseFacade.Add``1(``0)">
            <summary>
            【基础方法】新增对象
            </summary>
            <typeparam name="T">继承BaseModel</typeparam>
            <param name="model">需要新增的实体(ID会自动创建)</param>
            <returns>新增对象ID</returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.IBaseFacade.Edit``1(``0)">
            <summary>
            【基础方法】【慎用】更新对象中所有字段
            </summary>
            <typeparam name="T">继承BaseModel</typeparam>
            <param name="model">需要更新的实体</param>
        </member>
        <member name="M:HS.MVCFramework.Framework.IBaseFacade.Delete(System.String)">
            <summary>
            【基础方法】删除多个对象
            </summary>
            <param name="IDs">需要删除数据的ID，使用“,”分隔</param>
        </member>
        <member name="F:HS.MVCFramework.Framework.BaseFacade`1.appConfig">
            <summary>
            【基础方法】应用系统配置信息
            </summary>
        </member>
        <member name="F:HS.MVCFramework.Framework.BaseFacade`1._DBConfigPath">
            <summary>
            非默认的数据库配置文件路径
            </summary>
        </member>
        <member name="M:HS.MVCFramework.Framework.BaseFacade`1.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="configFileName">数据库配置文件</param>
        </member>
        <member name="M:HS.MVCFramework.Framework.BaseFacade`1.GetByID``1(System.String)">
            <summary>
            【基础方法】获取单个对象
            </summary>
            <typeparam name="T">继承BaseModel</typeparam>
            <param name="ID"></param>
            <returns></returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.BaseFacade`1.GetAll``1">
            <summary>
            【基础方法】获取所有对象
            </summary>
            <typeparam name="T">继承BaseModel</typeparam>
            <returns></returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.BaseFacade`1.GetPaged``1(HS.MVCFramework.Framework.PageInfo)">
            <summary>
            【基础方法】获取所有分页对象
            </summary>
            <typeparam name="T">继承BaseModel</typeparam>
            <returns></returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.BaseFacade`1.Add``1(``0)">
            <summary>
            【基础方法】新增对象
            </summary>
            <typeparam name="T">继承BaseModel</typeparam>
            <param name="model">需要新增的实体</param>
            <returns>新增对象ID</returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.BaseFacade`1.Edit``1(``0)">
            <summary>
            【基础方法】【慎用】更新对象中所有字段
            </summary>
            <typeparam name="T">继承BaseModel</typeparam>
            <param name="model">需要更新的实体</param>
        </member>
        <member name="M:HS.MVCFramework.Framework.BaseFacade`1.Delete(System.String)">
            <summary>
            【基础方法】删除多个对象
            </summary>
            <param name="IDs">需要删除数据的ID，使用“,”分隔</param>
        </member>
        <member name="T:HS.MVCFramework.Framework.BaseModel">
            <summary>
            Model父类
            </summary>
        </member>
        <member name="F:HS.MVCFramework.Framework.SSOBaseFacade.appConfig">
            <summary>
            【基础方法】应用系统配置信息
            </summary>
        </member>
        <member name="M:HS.MVCFramework.Framework.SSOBaseFacade.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="configFileName">数据库配置文件</param>
        </member>
        <member name="M:HS.MVCFramework.Framework.SSOBaseFacade.GetByID``1(System.String)">
            <summary>
            【基础方法】获取单个对象
            </summary>
            <typeparam name="T">继承BaseModel</typeparam>
            <param name="ID"></param>
            <returns></returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.SSOBaseFacade.GetAll``1">
            <summary>
            【基础方法】获取所有对象
            </summary>
            <typeparam name="T">继承BaseModel</typeparam>
            <returns></returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.SSOBaseFacade.GetPaged``1(HS.MVCFramework.Framework.PageInfo)">
            <summary>
            【基础方法】获取所有分页对象
            </summary>
            <typeparam name="T">继承BaseModel</typeparam>
            <returns></returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.SSOBaseFacade.Add``1(``0)">
            <summary>
            【基础方法】新增对象
            </summary>
            <typeparam name="T">继承BaseModel</typeparam>
            <param name="model">需要新增的实体</param>
            <returns>新增对象ID</returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.SSOBaseFacade.Edit``1(``0)">
            <summary>
            【基础方法】【慎用】更新对象中所有字段
            </summary>
            <typeparam name="T">继承BaseModel</typeparam>
            <param name="model">需要更新的实体</param>
        </member>
        <member name="M:HS.MVCFramework.Framework.SSOBaseFacade.Delete(System.String)">
            <summary>
            【基础方法】删除多个对象
            </summary>
            <param name="IDs">需要删除数据的ID，使用“,”分隔</param>
        </member>
        <member name="M:HS.MVCFramework.Framework.BaseCacheStorage.#ctor">
            <summary>
            默认Default缓存空间
            </summary>
        </member>
        <member name="M:HS.MVCFramework.Framework.BaseCacheStorage.#ctor(System.String)">
            <summary>
            自定义缓存空间
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:HS.MVCFramework.Framework.BaseCacheStorage._Set(System.String,System.Object)">
            <summary>
            设置缓存
            </summary>
            <param name="key"></param>
            <param name="obj"></param>
        </member>
        <member name="M:HS.MVCFramework.Framework.BaseCacheStorage._Get(System.String)">
            <summary>
            获取缓存
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.BaseCacheStorage.Remove(System.String)">
            <summary>
            移除缓存
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:HS.MVCFramework.Framework.BaseCacheStorage.RemoveAll">
            <summary>
            重置缓存域
            </summary>
            <returns>大于0表示移除的缓存记录数，等于0没有缓存可以移除。</returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.BaseCacheStorage.ContainsKey(System.String)">
            <summary>
            是否包含键
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:HS.MVCFramework.Framework.BaseCacheStorage.CacheArea">
            <summary>
            设置缓存空间名
            </summary>
        </member>
        <member name="P:HS.MVCFramework.Framework.BaseCacheStorage.KEYID">
            <summary>
            用于区分每缓存类型的键名
            </summary>
        </member>
        <member name="T:HS.MVCFramework.Framework.Cache.Core.Binder">
            <summary>
            自定序列化绑定操作
            </summary>
        </member>
        <member name="T:HS.MVCFramework.Framework.Cache.Core.CacheItem">
            <summary>
            内存缓存对象
            </summary>
        </member>
        <member name="P:HS.MVCFramework.Framework.Cache.Core.CacheItem.timestamp">
            <summary>
            缓存时间戳
            </summary>
        </member>
        <member name="P:HS.MVCFramework.Framework.Cache.Core.CacheItem.expiryDate">
            <summary>
            缓存时效
            </summary>
        </member>
        <member name="P:HS.MVCFramework.Framework.Cache.Core.CacheItem.value">
            <summary>
            缓存对象值
            </summary>
        </member>
        <member name="M:HS.MVCFramework.Framework.Cache.Core.CacheItemDictionary.ContainsKey(System.String)">
            <summary>
            是否存在Key
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.Cache.Core.CacheItemDictionary.Get(System.String)">
            <summary>
            获取元素
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.Cache.Core.CacheItemDictionary.Scavange">
            <summary>
            每隔1分钟将minutes分钟以前添加的元素扫描一次
            </summary>
            <param name="minutes"></param>
        </member>
        <member name="P:HS.MVCFramework.Framework.Cache.Core.CacheItemDictionary.IntervalMinutes">
            <summary>
            每隔多少分钟扫描一次
            </summary>
        </member>
        <member name="P:HS.MVCFramework.Framework.Cache.Core.CacheItemDictionary.ScavangeMinutes">
            <summary>
            处理多少分钟之前的元素
            </summary>
        </member>
        <member name="P:HS.MVCFramework.Framework.Cache.Core.CacheItemDictionary.MaxCount">
            <summary>
            最大可缓存元素数
            </summary>
        </member>
        <member name="P:HS.MVCFramework.Framework.Cache.Core.CacheItemDictionary.MaxSize">
            <summary>
            最大可使用缓存大小
            </summary>
        </member>
        <member name="T:HS.MVCFramework.Framework.Cache.Core.GCWrapper">
            <summary>
            This is a Helper/Wrapper class that calls GC.Collect with allowed conditions/settings.
            </summary>
        </member>
        <member name="M:HS.MVCFramework.Framework.Cache.Core.GCWrapper.Collect">
            <summary>
            Calls GC.Collect when 30 minutes has passed since last collection.
            
            Note: Does Gen 0,1,2 collections.
            </summary>
        </member>
        <member name="M:HS.MVCFramework.Framework.Cache.Core.GCWrapper.Collect(System.Int32)">
            <summary>
            Calls GC.Collect when 30 minutes has passed since last collection.
            </summary>
            <param name="generation">The gc generation.</param>
        </member>
        <member name="T:HS.MVCFramework.Framework.Cache.Core.ICacheOperations">
            <summary>
            缓存操作类
            </summary>
        </member>
        <member name="M:HS.MVCFramework.Framework.Cache.Core.ICacheOperations.Set(System.String,System.Object)">
            <summary>
            设置缓存
            </summary>
            <param name="key">KEY值</param>
            <param name="value">对象值</param>
        </member>
        <member name="M:HS.MVCFramework.Framework.Cache.Core.ICacheOperations.Set(System.String,System.Object,System.Int32)">
            <summary>
            设置缓存
            </summary>
            <param name="key">KEY值</param>
            <param name="value">对象值</param>
            <param name="expirySeconds">过期时效</param>
        </member>
        <!-- 对于成员“M:HS.MVCFramework.Framework.Cache.Core.ICacheOperations.Set(System.String,System.Object,System.DateTime)”忽略有格式错误的 XML 注释 -->
        <member name="M:HS.MVCFramework.Framework.Cache.Core.ICacheOperations.Remove(System.String)">
             <summary>
            根据KEY值移除缓存
             </summary>
        </member>
        <member name="M:HS.MVCFramework.Framework.Cache.Core.ICacheOperations.RemoveAll">
            <summary>
            移除所有缓存
            </summary>
            <returns>Number of objects revoked</returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.Cache.Core.ICacheOperations.ContainsKey(System.String)">
            <summary>
            判断是否包含缓存KEY
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:HS.MVCFramework.Framework.Cache.Core.ICacheOperations.Size">
            <summary>
            缓存的大小
            </summary>
        </member>
        <member name="T:HS.MVCFramework.Framework.Cache.Core.MemoryCache">
            <summary>
            内存缓存实现类
            </summary>
        </member>
        <member name="M:HS.MVCFramework.Framework.Cache.Core.MemoryCache.Get(System.String)">
            <summary>
            根据KEY获得缓存值
            </summary>
            <param name="key">KEY值</param>
            <returns>查找到缓存值</returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.Cache.Core.MemoryCache.Set(System.String,System.Object)">
            <summary>
            设置缓存值
            </summary>
            <param name="key">KEY值</param>
            <param name="value">对象值</param>
        </member>
        <member name="M:HS.MVCFramework.Framework.Cache.Core.MemoryCache.Set(System.String,System.Object,System.Int32)">
            <summary>
            设置缓存值
            </summary>
            <param name="key">KEY值</param>
            <param name="value">对象值</param>
            <param name="expirySeconds">过期时效，单位是秒</param>
        </member>
        <member name="M:HS.MVCFramework.Framework.Cache.Core.MemoryCache.Set(System.String,System.Object,System.TimeSpan)">
            <summary>
            设置缓存值
            </summary>
            <param name="key">KEY值</param>
            <param name="value">对象值</param>
            <param name="expiryTimeSpan">过期间隔</param>
        </member>
        <member name="M:HS.MVCFramework.Framework.Cache.Core.MemoryCache.Set(System.String,System.Object,System.DateTime)">
            <summary>
            设置缓存
            </summary>
            <param name="key">KEY值</param>
            <param name="value">对象值</param>
            <param name="expiryDate">过期时间</param>
        </member>
        <member name="M:HS.MVCFramework.Framework.Cache.Core.MemoryCache.Remove(System.String)">
            <summary>
            移除缓存
            </summary>
            <param name="key">KEY值</param>
        </member>
        <member name="M:HS.MVCFramework.Framework.Cache.Core.MemoryCache.RemoveAll">
            <summary>
            移除所有缓存
            </summary>
            <returns>大于0表示移除的缓存记录数，等于0没有缓存可以移除。</returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.Cache.Core.MemoryCache.ContainsKey(System.String)">
            <summary>
            检查是否包括KEY值
            </summary>
            <param name="key">KEY值</param>
            <returns></returns>
        </member>
        <member name="P:HS.MVCFramework.Framework.Cache.Core.MemoryCache.KeyPrefix">
            <summary>
            Key前缀
            </summary>
        </member>
        <member name="P:HS.MVCFramework.Framework.Cache.Core.MemoryCache.IsCache">
            <summary>
            是否缓存
            </summary>
        </member>
        <member name="P:HS.MVCFramework.Framework.Cache.Core.MemoryCache.Size">
            <summary>
            缓存的大小
            </summary>
        </member>
        <member name="P:HS.MVCFramework.Framework.Cache.Core.MemoryCache.Count">
            <summary>
            缓存条目数
            </summary>
        </member>
        <member name="P:HS.MVCFramework.Framework.Cache.Core.MemoryCache.IntervalMinutes">
            <summary>
            每隔多少分钟扫描一次
            </summary>
        </member>
        <member name="P:HS.MVCFramework.Framework.Cache.Core.MemoryCache.ScavangeMinutes">
            <summary>
            处理多少分钟之前的元素
            </summary>
        </member>
        <member name="P:HS.MVCFramework.Framework.Cache.Core.MemoryCache.MaxCount">
            <summary>
            最大可缓存元素数
            </summary>
        </member>
        <member name="P:HS.MVCFramework.Framework.Cache.Core.MemoryCache.MaxSize">
            <summary>
            最大可使用缓存大小
            </summary>
        </member>
        <member name="M:HS.MVCFramework.Framework.Cache.Core.MemoryCacheClient.Setup(System.String)">
            <summary>
            创建缓存
            </summary>
            <param name="name">名称</param>
        </member>
        <member name="M:HS.MVCFramework.Framework.Cache.Core.MemoryCacheClient.GetInstance">
            <summary>
            获得名称为（Default)的缓存操作实例
            </summary>
            <returns>缓存操作实例</returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.Cache.Core.MemoryCacheClient.GetInstance(System.String)">
            <summary>
            根据名称获得缓存操作实例
            </summary>
            <param name="name">名称</param>
            <returns>缓存操作实例</returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.Cache.Core.MemoryCacheClient.GetAllInstanceName">
            <summary>
            获取所有实例名
            </summary>
            <returns></returns>
        </member>
        <member name="T:HS.MVCFramework.Framework.Cache.Core.SerializationUtility">
            <summary>
            序列化辅助类
            </summary>
        </member>
        <member name="M:HS.MVCFramework.Framework.Cache.Core.SerializationUtility.ToBytes(System.Object)">
            <summary>
            将对象转换成二进制数据
            </summary>
            <param name="value">要转换的对象实例</param>
            <returns>序列化后的二进制数据</returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.Cache.Core.SerializationUtility.ToObject(System.Byte[])">
            <summary>
            将二进制数据转换成对象实例
            </summary>
            <param name="serializedObject">要转换的二进制数据</param>
            <returns>序列化后的对象实例</returns>
        </member>
        <member name="T:HS.MVCFramework.Framework.AppConfig">
            <summary>
            系统设置属性
            </summary>
        </member>
        <member name="P:HS.MVCFramework.Framework.AppConfig.AppName">
            <summary>
            系统名称
            </summary>
        </member>
        <member name="P:HS.MVCFramework.Framework.AppConfig.HomeStyle">
            <summary>
            首页风格 1:OS 2:传统
            </summary>
        </member>
        <member name="P:HS.MVCFramework.Framework.AppConfig.Version">
            <summary>
            系统版本号
            </summary>
        </member>
        <member name="P:HS.MVCFramework.Framework.AppConfig.LogoUrl">
            <summary>
            LOGO图片地址
            </summary>
        </member>
        <member name="P:HS.MVCFramework.Framework.AppConfig.DefaultPassword">
            <summary>
            默认密码
            </summary>
        </member>
        <member name="P:HS.MVCFramework.Framework.AppConfig.LoginAction">
            <summary>
            登录Action
            </summary>
        </member>
        <member name="P:HS.MVCFramework.Framework.AppConfig.LoginPage">
            <summary>
            登录页面
            </summary>
        </member>
        <member name="P:HS.MVCFramework.Framework.AppConfig.IndexAction">
            <summary>
            首页Action
            </summary>
        </member>
        <member name="P:HS.MVCFramework.Framework.AppConfig.IndexPage">
            <summary>
            首页页面
            </summary>
        </member>
        <member name="P:HS.MVCFramework.Framework.AppConfig.ErrorPageAction">
            <summary>
            错误页面地址
            </summary>
        </member>
        <member name="P:HS.MVCFramework.Framework.AppConfig.UnauthorizedPageAction">
            <summary>
            未授权页面地址
            </summary>
        </member>
        <member name="P:HS.MVCFramework.Framework.AppConfig.UseValidateCode">
            <summary>
            启用验证码
            </summary>
        </member>
        <member name="P:HS.MVCFramework.Framework.AppConfig.LoginLogoUrl">
            <summary>
            登录页logo地址
            </summary>
        </member>
        <member name="P:HS.MVCFramework.Framework.AppConfig.LoginBackImgUrl">
            <summary>
            登录页背景图地址
            </summary>
        </member>
        <member name="P:HS.MVCFramework.Framework.AppConfig.EnableCookie">
            <summary>
            是否启用cookie登录
            </summary>
        </member>
        <member name="P:HS.MVCFramework.Framework.AppConfig.CookieExpiresTime">
            <summary>
            Cookie过期时间（小时）
            </summary>
        </member>
        <member name="P:HS.MVCFramework.Framework.AppConfig.LogEnable">
            <summary>
            是否开启日志
            </summary>
        </member>
        <member name="P:HS.MVCFramework.Framework.AppConfig.LogType">
            <summary>
            日志记录方式 0:文本  3:应用数据库
            </summary>
        </member>
        <member name="P:HS.MVCFramework.Framework.AppConfig.SSOEnable">
            <summary>
            是否启用单点登录
            </summary>
        </member>
        <member name="P:HS.MVCFramework.Framework.AppConfig.SSOType">
            <summary>
            单点登录类型 1：服务端 2：远程客户端 3：本地客户端
            </summary>
        </member>
        <member name="P:HS.MVCFramework.Framework.AppConfig.SSOServerUrl">
            <summary>
            验证中心地址
            </summary>
        </member>
        <member name="P:HS.MVCFramework.Framework.AppConfig.SSOFactoryUrl">
            <summary>
            验证中心数据地址
            </summary>
        </member>
        <member name="P:HS.MVCFramework.Framework.AppConfig.SSOFactoryConfig">
            <summary>
            本地验证中心数据库配置
            </summary>
        </member>
        <member name="P:HS.MVCFramework.Framework.AppConfig.SSORegisterID">
            <summary>
            系统注册编号
            </summary>
        </member>
        <member name="M:System.Extends.GetUnNullableType(System.Type)">
            <summary>
            获取可空类型的实际类型
            </summary>
            <param name="conversionType">可空类型</param>
            <returns>可同类型的基类</returns>
        </member>
        <member name="M:System.Extends.Convert``1(System.Object,``0)">
            <summary>
            类型转换
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="obj">待转换的数据</param>
            <param name="defaultValue">转换默认值</param>
            <returns>转换后的数据</returns>
        </member>
        <member name="M:System.Extends.Adapter``1(System.Object,``0,System.String[])">
            <summary>
            实体适配器:把一种实体转换为另一种实体
            </summary>
            <typeparam name="T">转换后实体泛型</typeparam>
            <param name="obj">转换前的实体</param>
            <param name="defaultObjectEntity">默认值,也可以理解为寄主对象，转换前的对象将根据相同属性名称替换该实体中的属性</param>
            <param name="ignoreProperties">列外属性：这些属性将不被转换</param>
            <returns>转换后的实体</returns>
        </member>
        <member name="M:System.Extends.Adapter``2(System.Collections.Generic.List{``0},System.Collections.Generic.List{``1},System.String[])">
            <summary>
            实体列表适配器
            </summary>
            <typeparam name="C">转换前列表中实体泛型</typeparam>
            <typeparam name="T">转换后列表中实体泛型</typeparam>
            <param name="objList">转换前实体列表</param>
            <param name="defaultObjectEntitys">默认值：如果转换失败在返回该默认值</param>
            <param name="ignoreProperties">列外属性：这些属性将不被转换</param>
            <returns>转换后的实体列表</returns>
        </member>
        <member name="M:System.Extends.MappingAdapter``1(System.Object,``0,System.Collections.Generic.Dictionary{System.String,System.String},System.String[])">
            <summary>
            实体适配器:把一种实体转换为另一种实体
            </summary>
            <typeparam name="T">转换后实体泛型</typeparam>
            <param name="obj">转换前的实体</param>
            <param name="defaultObjectEntity">默认值：如果转换失败在返回该默认值</param>
            <param name="mapping">属性映射配置</param>
            <param name="ignoreProperties">列外属性：这些属性将不被转换</param>
            <returns>转换后的实体</returns>
        </member>
        <member name="M:System.Extends.MappingAdapter``2(System.Collections.Generic.List{``0},System.Collections.Generic.List{``1},System.Collections.Generic.Dictionary{System.String,System.String},System.String[])">
            <summary>
            实体列表适配器
            </summary>
            <typeparam name="C">转换前列表中实体泛型</typeparam>
            <typeparam name="T">转换后列表中实体泛型</typeparam>
            <param name="objList">转换前实体列表</param>
            <param name="defaultEntityList">默认值：如果转换失败在返回该默认值</param>
            <param name="mapping">属性映射配置</param>
            <param name="ignoreProperties">列外属性：这些属性将不被转换</param>
            <returns>转换后的实体列表</returns>
        </member>
        <member name="M:System.Extends.SetValue(System.Object,System.String,System.Object)">
            <summary>
            对象属性赋值
            </summary>
            <param name="obj">待赋值的对象</param>
            <param name="propertyName">属性名称</param>
            <param name="value">值</param>
        </member>
        <member name="M:System.Extends.SetValue(System.Object,System.Reflection.PropertyInfo,System.Object)">
            <summary>
            对象属性赋值
            </summary>
            <param name="obj">待赋值的对象</param>
            <param name="pi">属性</param>
            <param name="value">值</param>
        </member>
        <member name="M:System.Extends.GetValue(System.Object,System.String)">
            <summary>
            获取对象的属性值
            </summary>
            <param name="obj">待获取值的对象</param>
            <param name="propertyName">属性名称</param>
            <returns>属性的值</returns>
        </member>
        <member name="M:System.Extends.GetValue(System.Object,System.Reflection.PropertyInfo)">
            <summary>
            获取对象的属性值
            </summary>
            <param name="obj">待获取值的对象</param>
            <param name="pi">属性</param>
            <returns>属性的值</returns>
        </member>
        <member name="M:System.Extends.ToDataTable``1(System.Collections.Generic.List{``0},System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Boolean)">
            <summary>
            将实体对象列表转换成datatable，并将实体数据存储在表相应列（或映射后的列），列名格式为：表名.字段名（或字段映射名）
            </summary>
            <typeparam name="T">实体泛型</typeparam>
            <param name="modelList">实体列表</param>
            <param name="tableName">表名</param>
            <param name="columnMapping">字段名与datatable列名的映射关系，将不会生成不包含在映射表中的其他字段</param>
            <param name="columnNameContainTableName">列名是否包含表名。默认值：true 。列名格式：true:表名.字段名  false:字段名</param>
            <returns>转换产生的表(列名格式为 表名.字段名（或字段映射名）)</returns>
        </member>
        <member name="M:System.Extends.ToHashtable``1(``0,System.String)">
            <summary>
            将实体对象转换成Hashtable
            </summary>
            <typeparam name="T">实体泛型</typeparam>
            <param name="model">实体列表</param>
            <param name="tableName">表名</param>
            <returns>转换产生的表名</returns>
        </member>
        <member name="M:System.Extends.ToList``1(System.Data.DataTable)">
            <summary>
            将datatable转换成实体对象列表
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dataTable"></param>
            <returns></returns>
        </member>
        <member name="M:System.Extends.ToList``1(System.Data.IDataReader)">
            <summary>
            将datareader转换成实体对象列表
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="M:System.Extends.ToMD5(System.String)">
            <summary>
            MD5加密
            </summary>
            <param name="str">待加密的字符串</param>
            <returns>加密后的md5值</returns>
        </member>
        <member name="M:System.Extends.ToDES(System.String,System.String)">
            <summary>
            DES加密
            </summary>
            <param name="str">待加密字符串</param>
            <param name="encryptKey">加密密钥</param>
            <returns>返回DES加密结果</returns>
        </member>
        <member name="M:System.Extends.FromDES(System.String,System.String)">
            <summary>
            DES解密
            </summary>
            <param name="str">待解密字符串</param>
            <param name="decryptKey">解密密钥</param>
            <returns>返回使用DES解密后的结果</returns>
        </member>
        <member name="M:System.Extends.EnumToSelectList(System.Type,System.String[])">
            <summary>
            Enum转SelectList
            </summary>
            <param name="enumType">枚举类型</param>
            <param name="except">需要排除的类型</param>
            <returns></returns>
        </member>
        <member name="M:System.Extends.GetEnumDictionary(System.Type)">
            <summary>
            获取枚举成员与值键值对字典
            </summary>
            <param name="enumType">typeof(枚举名)</param>
            <returns>Dictionary(值，枚举名)对</returns>
        </member>
        <member name="M:System.Extends.ConvertToEnum``1(System.String)">
            <summary>
            根据值转化为对应枚举类型(不在枚举内返回默认值)
            </summary>
            <typeparam name="T">枚举</typeparam>
            <param name="value">值或者名称</param>
            <returns>枚举值(不在枚举内返回默认值)</returns>
        </member>
        <member name="M:System.Extends.ToEnumName``1(System.String)">
            <summary>
            根据值转换为对应枚举类型名称（存在枚举中返回空）
            </summary>
            <typeparam name="T">枚举</typeparam>
            <param name="value">值</param>
            <returns>值对应的名称（存在枚举中返回空）</returns>
        </member>
        <member name="M:System.Extends.ToEnumName``1(System.Nullable{System.Int32})">
            <summary>
            根据值转换为对应枚举类型名称（存在枚举中返回空）
            </summary>
            <typeparam name="T">枚举</typeparam>
            <param name="value">值</param>
            <returns>值对应的名称（存在枚举中返回空）</returns>
        </member>
        <member name="M:System.Extends.ToModel``1(System.Xml.XmlNode[],``0)">
            <summary>
            XMLNode数组转对象实体
            </summary>
            <typeparam name="T"></typeparam>
            <param name="xmls"></param>
            <param name="defaultObjectEntity"></param>
            <returns></returns>
        </member>
        <member name="M:System.Extends.ToDateTime(System.String,System.String)">
            <summary>
            字符串格式化时间
            </summary>
            <param name="time"></param>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="M:System.Extends.ToDynamic(System.Object)">
            <summary>
            将dynamic类型的对象传递到view页面
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="T:HS.MVCFramework.Framework.Helper.AdapterHelper">
            <summary>
            实体适配器：实体即一个实列化的类。转换目标的相关实体类型中的属性必须为可以Set的属性
            </summary>
        </member>
        <member name="M:HS.MVCFramework.Framework.Helper.AdapterHelper.Adapter``1(System.Object,``0,System.String[])">
            <summary>
            实体适配器:把一种实体转换为另一种实体
            </summary>
            <typeparam name="T">转换后实体泛型</typeparam>
            <param name="obj">转换前的实体</param>
            <param name="defaultObjectEntity">默认值：如果转换失败在返回该默认值</param>
            <param name="ignoreProperties">列外属性：这些属性将不被转换</param>
            <returns>转换后的实体</returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.Helper.AdapterHelper.Adapter``1(System.Object,``0,System.Collections.Generic.Dictionary{System.String,System.String},System.String[])">
            <summary>
            实体适配器:把一种实体转换为另一种实体
            </summary>
            <typeparam name="T">转换后实体泛型</typeparam>
            <param name="obj">转换前的实体</param>
            <param name="defaultObjectEntity">默认值：如果转换失败在返回该默认值</param>
            <param name="mapping">字段名映射方式</param>
            <param name="ignoreProperties">列外属性：这些属性将不被转换</param>
            <returns>转换后的实体</returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.Helper.AdapterHelper.Adapter``2(System.Collections.Generic.List{``0},System.Collections.Generic.List{``1},System.Collections.Generic.Dictionary{System.String,System.String},System.String[])">
            <summary>
            实体列表适配器
            </summary>
            <typeparam name="C">转换前列表中实体泛型</typeparam>
            <typeparam name="T">转换后列表中实体泛型</typeparam>
            <param name="objList">转换前实体列表</param>
            <param name="defaultObjectEntitys">默认值：如果转换失败在返回该默认值</param>
            <param name="ignoreProperties">列外属性：这些属性将不被转换</param>
            <returns>转换后的实体列表</returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.Helper.AdapterHelper.Adapter``2(System.Collections.Generic.List{``0},System.Collections.Generic.List{``1},System.String[])">
            <summary>
            实体列表适配器
            </summary>
            <typeparam name="C">转换前列表中实体泛型</typeparam>
            <typeparam name="T">转换后列表中实体泛型</typeparam>
            <param name="objList">转换前实体列表</param>
            <param name="defaultObjectEntitys">默认值：如果转换失败在返回该默认值</param>
            <param name="ignoreProperties">列外属性：这些属性将不被转换</param>
            <returns>转换后的实体列表</returns>
        </member>
        <member name="T:HS.MVCFramework.Framework.AdapterMapperIgnore">
            <summary>
            在实体转换中，声明某个属性不需要交换数值。
            </summary>
        </member>
        <member name="T:HS.MVCFramework.Framework.ConfigManager">
            <summary>
            配置文件管理器
            </summary>
        </member>
        <member name="F:HS.MVCFramework.Framework.ConfigManager.Instance">
            <summary>
            配置文件管理器实例[单例]
            </summary>
        </member>
        <member name="F:HS.MVCFramework.Framework.ConfigManager._lockhelper">
            <summary>
            多线程锁
            </summary>
        </member>
        <member name="F:HS.MVCFramework.Framework.ConfigManager._configDictionary">
            <summary>
            存放配置字典
            </summary>
        </member>
        <member name="F:HS.MVCFramework.Framework.ConfigManager._fileMoniter">
            <summary>
            监视配置文件
            </summary>
        </member>
        <member name="F:HS.MVCFramework.Framework.ConfigManager._configFiles">
            <summary>
            配置实体和配置文件匹配
            </summary>
        </member>
        <member name="M:HS.MVCFramework.Framework.ConfigManager.Single``1(System.String)">
            <summary>
            获取一个配置实体
            </summary>
            <typeparam name="T">配置实体泛型</typeparam>
            <param name="filename">配置文件地址</param>
            <param name="errorfunction">读取配置发生错误的处理方法</param>
            <returns></returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.ConfigManager.LoadConfig``1(System.String)">
            <summary>
            加载配置实体
            </summary>
            <typeparam name="T">配置实体泛型</typeparam>
            <param name="filename">配置文件地址</param>
            <param name="errorfunction">读取配置发生错误的处理方法</param>
            <returns></returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.ConfigManager.watcher_Changed(System.Object,System.IO.FileSystemEventArgs)">
            <summary>
            如果文件发生编辑
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:HS.MVCFramework.Framework.ConfigManager.reLoadConfig(System.String,System.Type)">
            <summary>
            重新读取配置
            </summary>
            <param name="filename">文件名</param>
            <param name="entityType">配置实体类型</param>
            <returns></returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.ConfigManager.SaveConfig``1(``0,System.String)">
            <summary>
            保存配置：把配置实体转化为配置文件
            </summary>
            <typeparam name="T">配置实体泛型</typeparam>
            <param name="entity">配置实体</param>
            <param name="filename">配置文件地址</param>
        </member>
        <member name="M:HS.MVCFramework.Framework.ConfigManager.GetDefaultFilePath``1">
            <summary>
            获得默认文件路径
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="P:HS.MVCFramework.Framework.ConfigManager.FileExt">
            <summary>
            配置文件扩展名
            </summary>
        </member>
        <member name="M:HS.MVCFramework.Framework.DynamicFactory.ToDynamic(System.Object)">
            <summary>
            将dynamic类型的对象传递到view页面
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="T:HS.MVCFramework.Framework.EnumHelper">
            <summary>
            枚举转换助手
            </summary>
        </member>
        <member name="M:HS.MVCFramework.Framework.EnumHelper.ConvertToEnum``1(System.String)">
            <summary>
            根据值转化为对应枚举类型
            </summary>
            <typeparam name="T">枚举</typeparam>
            <param name="value">值或者名称</param>
            <returns>枚举值</returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.EnumHelper.ConvertToEnumName``1(System.Int32)">
            <summary>
            根据值转化为对应枚举类型
            </summary>
            <typeparam name="T">枚举</typeparam>
            <param name="value">值或者名称</param>
            <returns>枚举值</returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.EnumHelper.GetEnumDictionary(System.Type)">
            <summary>
            获取枚举成员与值键值对字典
            </summary>
            <param name="enumType">typeof(枚举名)</param>
            <returns>Dictionary(值，枚举名)对</returns>
        </member>
        <member name="T:HS.MVCFramework.Framework.ParseHelper">
            <summary>
            类型转换助手:对类型实现强制转换
            </summary>
        </member>
        <member name="M:HS.MVCFramework.Framework.ParseHelper.ConvertValue``1(System.Object,``0)">
            <summary>
            值类型转换 (T为string,char,bool,DateTime,double,decimal,float,ulong,uint,ushort,byte,long,int,short,sbyte)
            </summary>
            <typeparam name="T">值类型</typeparam>
            <param name="sourceValue">源值</param>
            <param name="defaultValue">默认值</param>
            <returns>返回转换后的值</returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.ParseHelper.ConvertValue``1(System.Object,System.Nullable{``0})">
            <summary>
            可为空的值类型转换 (T只能为bool,DateTime,double,decimal,float,ulong,uint,ushort,byte,long,int,short,sbyte)
            (string,char不需要使用Nullable类型)
            </summary>
            <typeparam name="T">值类型</typeparam>
            <param name="sourceValue">原值</param>
            <param name="defaultValue">默认值</param>
            <returns>返回转换后的值</returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.ParseHelper.IsNumeric(System.Object)">
            <summary>
            判断对象是否为Int32类型的数字
            </summary>
            <param name="expression">待判断的内容</param>
            <returns>是则返加true 不是则返回 false</returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.ParseHelper.IsNumeric(System.String)">
            <summary>
            判断对象是否为Int32类型的数字
            </summary>
            <param name="expression">待判断的内容</param>
            <returns>是则返加true 不是则返回 false</returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.ParseHelper.IsSignlessInt(System.String)">
            <summary>
            验证是否为正整数
            </summary>
            <param name="expression">待判断的内容</param>
            <returns>是则返加true 不是则返回 false</returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.ParseHelper.IsDouble(System.Object)">
            <summary>
            是否为Double类型
            </summary>
            <param name="expression">待判断的内容</param>
            <returns>是则返加true 不是则返回 false</returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.ParseHelper.IsNumericArray(System.String[])">
            <summary>
            判断给定的字符串数组(strNumber)中的数据是不是都为数值型
            </summary>
            <param name="expression">待判断的内容</param>
            <returns>是则返加true 不是则返回 false</returns>
        </member>
        <member name="T:HS.MVCFramework.Framework.RequestHelper">
            <summary>
            请求助手
            </summary>
        </member>
        <member name="M:HS.MVCFramework.Framework.RequestHelper.GetQueryStringValue``1(System.String,``0)">
            <summary>
            获取地址栏传递参数值 (T为string,char,bool,DateTime,double,decimal,float,ulong,uint,ushort,byte,long,int,short,sbyte)
            </summary>
            <typeparam name="T">值类型</typeparam>
            <param name="keyname">键名称</param>
            <param name="defaultValue">默认值</param>
            <returns>地址栏参数值</returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.RequestHelper.GetQueryStringValue``1(System.String,System.Nullable{``0})">
            <summary>
            获取地址栏传递参数值(可为null) (T只能为bool,DateTime,double,decimal,float,ulong,uint,ushort,byte,long,int,short,sbyte)
            (string,char不需要使用Nullable类型)
            </summary>
            <typeparam name="T">值类型</typeparam>
            <param name="keyname">键名称</param>
            <param name="defaultValue">默认值</param>
            <returns>地址栏参数值</returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.RequestHelper.GetFormValue``1(System.String,``0)">
            <summary>
            获取表单传递参数(Post方式) (T为string,char,bool,DateTime,double,decimal,float,ulong,uint,ushort,byte,long,int,short,sbyte)
            </summary>
            <typeparam name="T">值类型</typeparam>
            <param name="keyname">键名称</param>
            <param name="defaultValue">默认值</param>
            <returns>表单值</returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.RequestHelper.GetFormValue``1(System.String,System.Nullable{``0})">
            <summary>
            获取表单传递参数(Post方式,可为null) (T只能为bool,DateTime,double,decimal,float,ulong,uint,ushort,byte,long,int,short,sbyte)
            (string,char不需要使用Nullable类型)
            </summary>
            <typeparam name="T">值类型</typeparam>
            <param name="keyname">键名称</param>
            <param name="defaultValue">默认值</param>
            <returns>表单值</returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.RequestHelper.GetParamsValue``1(System.String,``0)">
            <summary>
            获取表单、地址栏等传递参数 (T为string,char,bool,DateTime,double,decimal,float,ulong,uint,ushort,byte,long,int,short,sbyte)
            </summary>
            <typeparam name="T">值类型</typeparam>
            <param name="keyname">键名称</param>
            <param name="defaultValue">默认值</param>
            <returns>表单、地址栏参数值</returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.RequestHelper.GetParamsValue``1(System.String,System.Nullable{``0})">
            <summary>
            获取表单、地址栏等传递参数(可为null) (T只能为bool,DateTime,double,decimal,float,ulong,uint,ushort,byte,long,int,short,sbyte)
            (string,char不需要使用Nullable类型)
            </summary>
            <typeparam name="T">值类型</typeparam>
            <param name="keyname">键名称</param>
            <param name="defaultValue">默认值</param>
            <returns>表单、地址栏参数值</returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.RequestHelper.GetDomain(System.String)">
            <summary>
            获取根域名(例: user.china.com或123456.user.china.com, 返回china.com; www.china.com.cn返回china.com.cn)
            </summary>
            <param name="host">主机域名(如: user.china.com)</param>
            <returns>根域名</returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.RequestHelper.GetIP">
            <summary>
            获取用户IP
            </summary>
            <returns>用户IP</returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.RequestHelper.GetOS">
            <summary>
            获取用户操作系统
            </summary>
            <returns>用户操作系统</returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.RequestHelper.GetAgent">
            <summary>
            返回代理代码Mozilla/4.0(compatible;MSIE6.0;WindowsNT5.1;SV1)
            </summary>
            <returns>代理代码</returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.RequestHelper.GetContentType">
            <summary>
            客户发送的form內容或HTTPPUT的数据类型Content_Type
            </summary>
            <returns>Content_Type</returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.RequestHelper.GetHttpsKeysize">
            <summary>
            安全套接字层连接关键字的位数，如128
            </summary>
            <returns>安全套接字层连接关键字的位数</returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.RequestHelper.GetHttpsSecretkeysize">
            <summary>
            服务器验证私人关键字的位数如1024
            </summary>
            <returns>服务器验证私人关键字的位数如</returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.RequestHelper.GetHttpsServerIssuer">
            <summary>
            服务器证书的发行者字段
            </summary>
            <returns>服务器证书的发行者字段</returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.RequestHelper.GetHttpsServerSubject">
            <summary>
            服务器证书的主题字段
            </summary>
            <returns>服务器证书的主题字段</returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.RequestHelper.GetAuthPassword">
            <summary>
            当使用基本验证模式时，客户在密码对话框中输入的密码
            </summary>
            <returns>客户在密码对话框中输入的密码</returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.RequestHelper.GetAuthType">
            <summary>
            是用户访问受保护的脚本时，服务器用於检验用户的验证方法
            </summary>
            <returns>是用户访问受保护的脚本时，服务器用於检验用户的验证方法</returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.RequestHelper.GetAuthUser">
            <summary>
            代证的用户名
            </summary>
            <returns>代证的用户名</returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.RequestHelper.GetCertCookie">
            <summary>
            唯一的客户证书ID号
            </summary>
            <returns>唯一的客户证书ID号</returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.RequestHelper.GetCertFlag">
            <summary>
            客户证书标誌，如有客户端证书，则bit0为0如果客户端证书验证无效，bit1被设置为1
            </summary>
            <returns>客户证书标誌</returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.RequestHelper.GetCertIssuer">
            <summary>
            用户证书中的发行者字段
            </summary>
            <returns>用户证书中的发行者字段</returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.RequestHelper.GetCertKeysize">
            <summary>
            安全套接字层连接关键字的位数，如128
            </summary>
            <returns>安全套接字层连接关键字的位数</returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.RequestHelper.GetCertSecretkeysize">
            <summary>
            服务器验证私人关键字的位数如1024
            </summary>
            <returns>服务器验证私人关键字的位数</returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.RequestHelper.GetCertSerialnumber">
            <summary>
            客户证书的序列号字段
            </summary>
            <returns>客户证书的序列号字段</returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.RequestHelper.GetCertServerIssuer">
            <summary>
            服务器证书的发行者字段
            </summary>
            <returns>服务器证书的发行者字段</returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.RequestHelper.GetCertServerSubject">
            <summary>
            服务器证书的主题字段
            </summary>
            <returns>服务器证书的主题字段</returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.RequestHelper.GetCertSubject">
            <summary>
            客户端证书的主题字段
            </summary>
            <returns>客户端证书的主题字段</returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.RequestHelper.MapPath(System.String)">
            <summary>
            文件物理地址
            </summary>
            <param name="url">地址或者路径</param>
            <returns></returns>
        </member>
        <member name="T:HS.MVCFramework.Framework.SecurityHelper">
            <summary>
            安全助手
            </summary>
        </member>
        <member name="M:HS.MVCFramework.Framework.SecurityHelper.ToDES(System.String,System.String)">
            <summary>
            DES加密字符串(来自DiscuzNT)
            </summary>
            <param name="encryptString">待加密的字符串</param>
            <param name="encryptKey">加密密钥,要求为8位</param>
            <returns>加密成功返回加密后的字符串,失败返回源串</returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.SecurityHelper.FromDES(System.String,System.String)">
            <summary>
            DES解密字符串(来自DiscuzNT)
            </summary>
            <param name="decryptString">待解密的字符串</param>
            <param name="decryptKey">解密密钥,要求为8位,和加密密钥相同</param>
            <returns>解密成功返回解密后的字符串,失败返源串</returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.SecurityHelper.ToSHA256(System.String)">
            <summary>
            SHA256函数
            </summary>
            /// <param name="str">待编码的内容</param>
            <returns>SHA256结果</returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.SecurityHelper.ToMD5(System.String)">
            <summary>
            MD5加密
            </summary>
            <param name="str">待加密的内容</param>
            <returns>MD5结果</returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.SecurityHelper.ToBase64(System.String)">
            <summary>
            对字符串进行 Base64 编码，utf8
            </summary>
            <param name="str">待编码的内容</param>
            <returns>Base64 编码</returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.SecurityHelper.FromBase64(System.String)">
            <summary>
            进行字符串 Base64 解码，utf8
            </summary>
            <param name="str">待解码的内容</param>
            <returns>解码后的字符串内容</returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.SecurityHelper.RSAEncrypt(System.String,System.Byte[])">
            <summary>
            RSA加密
            </summary>
            <param name="publicKey"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.SecurityHelper.RSADecrypt(System.String,System.Byte[])">
            <summary>
            RSA解密
            </summary>
            <param name="rsaKeyString"></param>
            <param name="btEncryptedSecret"></param>
            <returns></returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.SecurityHelper.RSAEncryptString(System.String,System.String)">
            <summary>
            RSA加密
            </summary>
            <param name="sSource"></param>
            <param name="privateKey"></param>
            <returns></returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.SecurityHelper.RSADecryptString(System.String,System.String)">
            <summary>
            RSA解密
            </summary>
            <param name="sSource"></param>
            <param name="privateKey"></param>
            <returns></returns>
        </member>
        <member name="T:HS.MVCFramework.Framework.StringHelper">
            <summary>
            字符串助手
            </summary>
        </member>
        <member name="M:HS.MVCFramework.Framework.StringHelper.GetStringLength(System.String)">
            <summary>
            返回字符串真实长度, 1个汉字长度为2
            </summary>
            <param name="str">内容字符串</param>
            <returns></returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.StringHelper.IsCompriseStr(System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="str"></param>
            <param name="stringarray"></param>
            <param name="strsplit"></param>
            <returns></returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.StringHelper.GetInArrayID(System.String,System.String[],System.Boolean)">
            <summary>
            判断指定字符串在指定字符串数组中的位置
            </summary>
            <param name="strSearch">字符串</param>
            <param name="stringArray">字符串数组</param>
            <param name="caseInsensetive">是否不区分大小写, true为不区分, false为区分</param>
            <returns>字符串在指定字符串数组中的位置, 如不存在则返回-1</returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.StringHelper.CreateRegionCode(System.Int32)">
            <summary>
            
            </summary>
            <param name="strlength"></param>
            <returns></returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.StringHelper.GetInArrayID(System.String,System.String[])">
            <summary>
            判断指定字符串在指定字符串数组中的位置
            </summary>
            <param name="strSearch">字符串</param>
            <param name="stringArray">字符串数组</param>
            <returns>字符串在指定字符串数组中的位置, 如不存在则返回-1</returns>		
        </member>
        <member name="M:HS.MVCFramework.Framework.StringHelper.InArray(System.String,System.String[],System.Boolean)">
            <summary>
            判断指定字符串是否属于指定字符串数组中的一个元素
            </summary>
            <param name="strSearch">字符串</param>
            <param name="stringArray">字符串数组</param>
            <param name="caseInsensetive">是否不区分大小写, true为不区分, false为区分</param>
            <returns>判断结果</returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.StringHelper.InArray(System.String,System.String[])">
            <summary>
            判断指定字符串是否属于指定字符串数组中的一个元素
            </summary>
            <param name="str">字符串</param>
            <param name="stringarray">字符串数组</param>
            <returns>判断结果</returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.StringHelper.InArray(System.String,System.String)">
            <summary>
            判断指定字符串是否属于指定字符串数组中的一个元素
            </summary>
            <param name="str">字符串</param>
            <param name="stringarray">内部以逗号分割单词的字符串</param>
            <returns>判断结果</returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.StringHelper.InArray(System.String,System.String,System.String)">
            <summary>
            判断指定字符串是否属于指定字符串数组中的一个元素
            </summary>
            <param name="str">字符串</param>
            <param name="stringarray">内部以逗号分割单词的字符串</param>
            <param name="strsplit">分割字符串</param>
            <returns>判断结果</returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.StringHelper.InArray(System.String,System.String,System.String,System.Boolean)">
            <summary>
            判断指定字符串是否属于指定字符串数组中的一个元素
            </summary>
            <param name="str">字符串</param>
            <param name="stringarray">内部以逗号分割单词的字符串</param>
            <param name="strsplit">分割字符串</param>
            <param name="caseInsensetive">是否不区分大小写, true为不区分, false为区分</param>
            <returns>判断结果</returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.StringHelper.RTrim(System.String)">
            <summary>
            删除字符串尾部的回车/换行/空格
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.StringHelper.ClearBR(System.String)">
            <summary>
            清除给定字符串中的回车及换行符
            </summary>
            <param name="str">要清除的字符串</param>
            <returns>清除后返回的字符串</returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.StringHelper.CutString(System.String,System.Int32,System.Int32)">
            <summary>
            从字符串的指定位置截取指定长度的子字符串
            </summary>
            <param name="str">原字符串</param>
            <param name="startIndex">子字符串的起始位置</param>
            <param name="length">子字符串的长度</param>
            <returns>子字符串</returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.StringHelper.CutString(System.String,System.Int32)">
            <summary>
            从字符串的指定位置开始截取到字符串结尾的了符串
            </summary>
            <param name="str">原字符串</param>
            <param name="startIndex">子字符串的起始位置</param>
            <returns>子字符串</returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.StringHelper.CleanInput(System.String)">
            <summary>
            清理字符串(清楚不是字母，不是.@-的符号)
            </summary>
            <param name="strIn">待处理的字符串</param>
            <returns>处理后的结果</returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.StringHelper.GetSubString(System.String,System.Int32,System.Int32,System.String)">
            <summary>
            取指定长度的字符串
            </summary>
            <param name="p_SrcString">要检查的字符串</param>
            <param name="p_StartIndex">起始位置</param>
            <param name="p_Length">指定长度</param>
            <param name="p_TailString">用于替换的字符串</param>
            <returns>截取后的字符串</returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.StringHelper.GetUnicodeSubString(System.String,System.Int32,System.String)">
            <summary>
            获取Unicode的子字符串
            </summary>
            <param name="str">待处理的字符串</param>
            <param name="len">子字符串长度</param>
            <param name="p_TailString">尾部要追加的字符串</param>
            <returns>获取Unicode的子字符串</returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.StringHelper.GetSubString(System.String,System.Int32,System.String)">
            <summary>
            字符串如果操过指定长度则将超出的部分用指定字符串代替
            </summary>
            <param name="p_SrcString">要检查的字符串</param>
            <param name="p_Length">指定长度</param>
            <param name="p_TailString">用于替换的字符串</param>
            <returns>截取后的字符串</returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.StringHelper.ReplaceString(System.String,System.String,System.String,System.Boolean)">
            <summary>
            自定义的替换字符串函数
            </summary>
        </member>
        <member name="M:HS.MVCFramework.Framework.StringHelper.SplitString(System.String,System.String)">
            <summary>
            分割字符串
            </summary>
            <param name="strContent">待分割的字符串</param>
            <param name="strSplit">分割符</param>
            <returns>分割后的结果</returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.StringHelper.SplitString(System.String,System.String,System.Int32)">
            <summary>
            分割字符串
            </summary>
            <param name="strContent">待分割的字符串</param>
            <param name="strSplit">分割符</param>
            <param name="count">限定结果的总数</param>
            <returns>分割后的结果</returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.StringHelper.SplitString(System.String,System.String,System.Boolean,System.Int32)">
            <summary>
            分割字符串
            </summary>
            <param name="strContent">待分割的字符串</param>
            <param name="strSplit">分割符</param>
            <param name="ignoreRepeatItem">忽略重复项</param>
            <param name="maxElementLength">单个元素最大长度</param>
            <returns>分割后的结果</returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.StringHelper.SplitString(System.String,System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            分割字符串
            </summary>
            <param name="strContent">待分割的字符串</param>
            <param name="strSplit">分割符</param>
            <param name="ignoreRepeatItem">忽略重复项</param>
            <param name="minElementLength">单个元素最大长度</param>
            <param name="maxElementLength">单个元素最小长度</param>
            <returns>分割后的结果</returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.StringHelper.SplitString(System.String,System.String,System.Boolean)">
            <summary>
            分割字符串
            </summary>
            <param name="strContent">待分割的字符串</param>
            <param name="strSplit">分割符</param>
            <param name="ignoreRepeatItem">忽略重复项</param>
            <returns>分割后的结果</returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.StringHelper.DistinctStringArray(System.String[],System.Int32)">
            <summary>
            清除字符串数组中的重复项
            </summary>
            <param name="strArray">字符串数组</param>
            <param name="maxElementLength">字符串数组中单个元素的最大长度</param>
            <returns>过滤后的结果</returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.StringHelper.DistinctStringArray(System.String[])">
            <summary>
            清除字符串数组中的重复项
            </summary>
            <param name="strArray">字符串数组</param>
            <returns>清楚后的结果</returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.StringHelper.StrFilter(System.String,System.String)">
            <summary>
            进行指定的替换(脏字过滤)
            </summary>
            <param name="str">待处理的字符串</param>
            <param name="bantext">过滤的规则【习近平=*】</param>
            <returns>过滤后的结果</returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.StringHelper.StrIsNullOrEmpty(System.String)">
            <summary>
            字段串是否为Null或为""(空)
            </summary>
            <param name="str">待判断的字符串</param>
            <returns>判断的结果</returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.StringHelper.PadStringArray(System.String[],System.Int32,System.Int32)">
            <summary>
            过滤字符串数组中每个元素为合适的大小
            当长度小于minLength时，忽略掉,-1为不限制最小长度
            当长度大于maxLength时，取其前maxLength位
            如果数组中有null元素，会被忽略掉
            </summary>
            <param name="minLength">单个元素最小长度</param>
            <param name="maxLength">单个元素最大长度</param>
            <returns>过滤后的结果</returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.StringHelper.GetRegexMatchValue(System.String,System.String)">
            <summary>
            唯一匹配 Match
            </summary>
            <param name="str">待处理的字符串</param>
            <param name="regex">正则表达式</param>
            <returns>返回唯一的匹配值</returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.StringHelper.GetRegexMatchValue(System.String,System.String,System.String)">
            <summary>
            在开始字符串和全文结束之间查找一个匹配的项
            </summary>
            <param name="str">待处理的字符串</param>
            <param name="regex">正则表达式</param>
            <param name="startString">开始的字符串</param>
            <returns>返回唯一的匹配值</returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.StringHelper.GetRegexMatchValue(System.String,System.String,System.String,System.String)">
            <summary>
            在开始字符串和结束字符串之间查找一个匹配的项
            </summary>
            <param name="str">待处理的字符串</param>
            <param name="regex">正则表达式</param>
            <param name="startString">开始的字符串</param>
            <param name="endString">结束的字符串</param>
            <returns>返回唯一的匹配值</returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.StringHelper.GetRegexMatchesCount(System.String,System.String)">
            <summary>
            获取匹配 Matches总数
            </summary>
            <param name="str">待处理的字符串</param>
            <param name="regex">正则表达式</param>
            <returns>匹配个数</returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.StringHelper.ReplaceLineBreak(System.String)">
            <summary>
            替换\r\n为空，清空换行
            </summary>
            <param name="str">待处理的字符串</param>
            <returns>处理后的字符串内容</returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.StringHelper.ObjectIsNullOrEmpty(System.Object)">
            <summary>
            判断Object对象是否为Null或""
            </summary>
            <param name="aobj_data">Object数据</param>
            <returns>
            检测结果
            True:Object对象为空
            False:Object对象不为空
            </returns>
            <example>
            <code>
            [C#]
            object data = "123";
            bool result = StringHelper.ObjectIsNullOrEmpty(data);
            </code>
            </example>
        </member>
        <member name="M:HS.MVCFramework.Framework.StringHelper.ObjectToBool(System.Object,System.Boolean)">
            <summary>
            Object数据类型转为Bool数据类型
            </summary>
            <param name="objData">Object对象</param>
            <param name="defaultValue">Bool默认值</param>
            <returns>Bool数据类型值</returns>
            <example>
            <code>
            [C#]
            object obj = "12345";
            bool defaultValue = true;
            bool returnBool = StringHelper.ObjectToBool(obj, defaultValue);
            </code>
            </example>
        </member>
        <member name="M:HS.MVCFramework.Framework.StringHelper.ObjectToDateTime(System.Object,System.DateTime)">
            <summary>
            Object数据类型转为DateTime数据类型
            </summary>
            <param name="objData">Object对象</param>
            <param name="defaultValue">DateTime默认值</param>
            <returns>DateTime数据类型值</returns>
            <example>
            <code>
            [C#]
            object obj = "12345";
            DateTime defaultValue = DateTime.Now;
            DateTime returnBool = StringHelper.ObjectToDateTime(obj, defaultValue);
            </code>
            </example>
        </member>
        <member name="M:HS.MVCFramework.Framework.StringHelper.ObjectToDateTime(System.Object)">
            <summary>
            object对象转为日期型
            </summary>
            <param name="aobj_data">Object对象</param>
            <returns>DateTime数据类型值</returns>
            <example>
            <code>
            [C#]
            object obj = "12345";
            DateTime returnValue = StringHelper.ObjectToDateTime(obj);
            </code>
            </example>
        </member>
        <member name="M:HS.MVCFramework.Framework.StringHelper.ObjectToInt(System.Object,System.Int32)">
            <summary>
            Object数据类型转为Int数据类型
            </summary>
            <param name="objData">Object对象</param>
            <param name="defaultValue">Int默认值</param>
            <returns>Int数据类型值</returns>
            <example>
            <code>
            [C#]
            object obj = "12345";
            int defaultValue = 10;
            int returnInt = StringHelper.ObjectToInt(obj, defaultValue);
            </code>
            </example>
        </member>
        <member name="T:HS.MVCFramework.Framework.TransferHelper">
            <summary>
            转换助手
            </summary>
        </member>
        <member name="M:HS.MVCFramework.Framework.TransferHelper.DataReaderToList``1(System.Data.IDataReader)">
            <summary>
            DataReader转泛型
            </summary>
            <typeparam name="T">传入的实体类</typeparam>
            <param name="objReader">DataReader对象</param>
            <returns></returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.TransferHelper.IsNullOrDBNull(System.Object)">
            <summary>
            判断指定对象是否是有效值
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.TransferHelper.ToDataTable``1(System.Collections.Generic.List{``0},System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Boolean)">
            <summary>
            将实体对象列表转换成datatable，并将实体数据存储在表相应列（或映射后的列），列名格式为：表名.字段名（或字段映射名）
            </summary>
            <typeparam name="T">实体泛型</typeparam>
            <param name="modelList">实体列表</param>
            <param name="tableName">表名</param>
            <param name="columnMapping">字段名与datatable列名的映射关系，将不会生成不包含在映射表中的其他字段</param>
            <param name="columnNameContainTableName">列名是否包含表名。默认值：true 。列名格式：true:表名.字段名  false:字段名</param>
            <returns>转换产生的表名</returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.TransferHelper.DataTableToList``1(System.Data.DataTable)">
            <summary>
            将datatable转成实体列表
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dataTable"></param>
            <returns></returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.TransferHelper.ToHashtable``1(``0,System.String)">
            <summary>
            将实体对象转换成Hashtable
            </summary>
            <typeparam name="T">实体泛型</typeparam>
            <param name="model">实体列表</param>
            <param name="tableName">表名</param>
            <returns>转换产生的表名</returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.TransferHelper.TransArrayToString(System.String[],System.String)">
            <summary>
            把字符串数组转化为以分割符号(默认为",")分割的字符串
            </summary>
            <param name="arr">字符串数组</param>
            <param name="spliter">分割符号，默认为","</param>
            <returns>以分割符号的字符串</returns>
        </member>
        <member name="T:HS.MVCFramework.Framework.PageInfo">
            <summary>
            分页器
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:HS.MVCFramework.Framework.PageInfo.PageSize">
            <summary>
            页面尺寸
            </summary>
        </member>
        <member name="P:HS.MVCFramework.Framework.PageInfo.PageIndex">
            <summary>
            页码
            </summary>
        </member>
        <member name="P:HS.MVCFramework.Framework.PageInfo.PageCount">
            <summary>
            总页面数
            </summary>
        </member>
        <member name="P:HS.MVCFramework.Framework.PageInfo.Total">
            <summary>
            总记录数
            </summary>
        </member>
        <member name="T:HS.MVCFramework.Framework.Orderby`1">
            <summary>
            排序类
            </summary>
        </member>
        <member name="T:HS.MVCFramework.Framework.DynamicMethodHelper">
            <summary>
            动态方法助手
            </summary>
        </member>
        <member name="M:HS.MVCFramework.Framework.DynamicMethodHelper.#ctor(System.Reflection.MethodInfo)">
            <summary>
            构造函数
            </summary>
            <param name="methodInfo">方法</param>
        </member>
        <member name="M:HS.MVCFramework.Framework.DynamicMethodHelper.Execute(System.Object,System.Object[])">
            <summary>
            执行方法
            </summary>
            <param name="instance">对象</param>
            <param name="parameters">参数</param>
            <returns>对象</returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.DynamicMethodHelper.GetExecuteDelegate(System.Reflection.MethodInfo)">
            <summary>
            反射执行方法为委托
            </summary>
            <param name="methodInfo"></param>
            <returns></returns>
        </member>
        <member name="T:HS.MVCFramework.Framework.PropertyHelper">
            <summary>
            反射属性助手
            </summary>
        </member>
        <member name="F:HS.MVCFramework.Framework.PropertyHelper._setPool">
            <summary>
            set缓存池
            </summary>
        </member>
        <member name="F:HS.MVCFramework.Framework.PropertyHelper._getPool">
            <summary>
            get缓存池
            </summary>
        </member>
        <member name="M:HS.MVCFramework.Framework.PropertyHelper.AddProperties(System.Type,System.String,System.String,System.Type,System.Type[])">
            <summary>
            增加属性
            </summary>
            <param name="t">类型</param>
            <param name="assemblyName">程序集名</param>
            <param name="propertyName">属性名</param>
            <param name="returnType">返回类型</param>
            <param name="parameterTypes">参数类型</param>
        </member>
        <member name="M:HS.MVCFramework.Framework.PropertyHelper.FastSetValue(System.Reflection.PropertyInfo,System.Object,System.Object[])">
            <summary>
            快速设置属性值
            </summary>
            <param name="pi">属性片段</param>
            <param name="instance">实体</param>
            <param name="value">属性值</param>
            <param name="value"></param>
        </member>
        <member name="M:HS.MVCFramework.Framework.PropertyHelper.FastGetValue(System.Reflection.PropertyInfo,System.Object)">
            <summary>
            快速获取属性值
            </summary>
            <param name="pi">属性片段</param>
            <param name="instance">实体</param>
            <returns></returns>
        </member>
        <member name="T:HS.MVCFramework.Framework.AggregateRoot">
            <summary>
            代表的聚合根的基类。
            </summary>
        </member>
        <member name="T:HS.MVCFramework.Framework.IAggregateRoot">
            <summary>
            表示已实现的类是聚合的根。
            </summary>
        </member>
        <member name="P:HS.MVCFramework.Framework.IAggregateRoot.ID">
            <summary>
            Gets or sets the identifier of the entity.
            </summary>
        </member>
        <member name="P:HS.MVCFramework.Framework.IAggregateRoot.GlobalID">
            <summary>
            获取或设置云存储标识符。
            </summary>
        </member>
        <member name="P:HS.MVCFramework.Framework.IAggregateRoot.OperationType">
            <summary>
            操作类型
            </summary>
        </member>
        <member name="P:HS.MVCFramework.Framework.IAggregateRoot.SqlBlocks">
            <summary>
            Sql脚本代码块
            </summary>
        </member>
        <member name="M:HS.MVCFramework.Framework.AggregateRoot.GetHashCode">
            <summary>
            获取聚合根HashCode,表示直接根据ID获取HashCode
            </summary>
            <returns>根据ID获取HashCode的值</returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.AggregateRoot.Equals(System.Object)">
            <summary>
            相等比较 
            </summary>
            <param name="obj">待比较对象</param>
            <returns>true:俩个对象相等;false:俩个对象不相等</returns>
        </member>
        <member name="P:HS.MVCFramework.Framework.AggregateRoot.ID">
            <summary>
            获取或设置集合的根的标识符。
            </summary>
        </member>
        <member name="P:HS.MVCFramework.Framework.AggregateRoot.GlobalID">
            <summary>
            获取或设置云存储标识符。
            </summary>
        </member>
        <member name="P:HS.MVCFramework.Framework.AggregateRoot.OperationType">
            <summary>
            操作类型
            </summary>
        </member>
        <member name="P:HS.MVCFramework.Framework.AggregateRoot.SqlBlocks">
            <summary>
            Sql脚本代码块
            </summary>
        </member>
        <member name="T:HS.MVCFramework.Framework.ExpressionToSql">
            <summary>
            lamdal表达式转sql语句
            </summary>
        </member>
        <member name="T:HS.MVCFramework.Framework.IRepository">
            <summary>
            提供数据仓储操作的接口
            </summary>
        </member>
        <member name="M:HS.MVCFramework.Framework.IRepository.Persist(System.Collections.Generic.List{HS.MVCFramework.Framework.IAggregateRoot})">
            <summary>
            数据持久化操作,可以包括新增，修改，删除
            </summary>
            <param name="entities"></param>
        </member>
        <member name="M:HS.MVCFramework.Framework.IRepository.Add``1(``0)">
            <summary>
            新增记录
            </summary>
            <typeparam name="TAggregateRoot">聚合根实体泛型:必须继承IAggregateRoot</typeparam>
            <param name="aggregateRoot">聚合根实体：必须继承IAggregateRoot</param>
            <returns>返回聚合根实体主键</returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.IRepository.Add(HS.MVCFramework.Framework.AggregateRoot)">
            <summary>
            新增记录
            </summary>
            <param name="obj">实体</param>
            <returns>返回聚合根实体主键</returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.IRepository.Update``1(``0)">
            <summary>
            更新记录
            </summary>
            <typeparam name="TAggregateRoot">聚合根实体泛型：必须继承IAggregateRoot</typeparam>
            <param name="aggregateRoot">聚合根实体：必须继承IAggregateRoot</param>
        </member>
        <member name="M:HS.MVCFramework.Framework.IRepository.Update(HS.MVCFramework.Framework.AggregateRoot)">
            <summary>
            更新记录
            </summary>
            <param name="obj">聚合根实体：必须继承IAggregateRoot</param>
        </member>
        <member name="M:HS.MVCFramework.Framework.IRepository.Update(HS.MVCFramework.Framework.AggregateRoot,System.Boolean,System.Collections.Generic.List{System.String},System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            更新记录
            </summary>
            <param name="obj">数据实体</param>
            <param name="isUpdate">是否需要更新；若为true，则Parameters为需要更新的字段列表。若为false，则Parameters为不需要更新的字段列表</param>
            <param name="Parameters">字段参数列表</param>
            <param name="PrimarykeyValue">当前数据实体的主键键/值对</param>
        </member>
        <member name="M:HS.MVCFramework.Framework.IRepository.Update``1(HS.MVCFramework.Framework.AggregateRoot,System.String[],HS.MVCFramework.Framework.ISpecification{``0})">
            <summary>
            【谨慎】根据条件批量更新表记录
            </summary>
            <typeparam name="TAggregateRoot">实体类型</typeparam>
            <param name="updateValues">待更新的字段</param>
            <param name="specification">【谨慎】更新条件</param>
            <returns>返回生成的sql语句，提供检查是否正确</returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.IRepository.Delete``1(``0)">
            <summary>
            根据聚合根实体(的标识)删除
            </summary>
            <typeparam name="TAggregateRoot">聚合根实体泛型：必须继承IAggregateRoot</typeparam>
            <param name="aggregateRoot">聚合根实体</param>
        </member>
        <member name="M:HS.MVCFramework.Framework.IRepository.Delete(HS.MVCFramework.Framework.AggregateRoot)">
            <summary>
            根据实体对象(的标识)删除
            </summary>
            <param name="obj">聚合根实体</param>
        </member>
        <member name="M:HS.MVCFramework.Framework.IRepository.AsQueryable``1">
            <summary>
            提供对数据类型TAggregateRoot已知的特定数据源的查询进行计算的功能
            </summary>
            <typeparam name="TAggregateRoot">聚合根实体泛型</typeparam>
            <returns>提供对聚合根的查询操作</returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.IRepository.AsQueryOver``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
             提供对数据类型TAggregateRoot已知的特定数据源的查询进行计算的功能,只能在NHibernate中使用
            </summary>
            <typeparam name="TAggregateRoot"></typeparam>
            <returns></returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.IRepository.AsQueryOver``1">
            <summary>
             提供对数据类型TAggregateRoot已知的特定数据源的查询进行计算的功能,只能在NHibernate中使用
            </summary>
            <typeparam name="TAggregateRoot"></typeparam>
            <returns></returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.IRepository.Get``1(System.Object)">
            <summary>
            通过主键返回对象
            </summary>
            <param name="id">主键值</param>
            <returns>聚合根实体</returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.IRepository.Get(System.Type,System.Object)">
            <summary>
            查询聚合根实体
            </summary>
            <param name="classzz">聚合根实体类型</param>
            <param name="key">主键值</param>
            <returns>聚合根实体</returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.IRepository.Get``1(HS.MVCFramework.Framework.ISpecification{``0})">
            <summary>
            通过使用给定的规范,从存储库中获取单个聚合根实例。
            </summary>
            <param name="specification">与聚合根匹配的规范。</param>
            <returns>聚合根的实例。</returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.IRepository.Get``1(HS.MVCFramework.Framework.ISpecification{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},HS.MVCFramework.Framework.SortOrder)">
            <summary>
            通过使用给定的规范,从存储库中获取单个聚合根实例(取得条件排序第一条)。
            </summary>
            <param name="specification">与聚合根匹配的规范。</param>
            <returns>聚合根的实例。</returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.IRepository.GetAll(System.Type)">
            <summary>
            根据类型获得表数据
            </summary>
            <param name="entityType"></param>
            <returns></returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.IRepository.GetAll(System.Type,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            条件查询对象列表
            </summary>
            <param name="entityType"></param>
            <param name="specification">查询条件字典</param>
            <returns></returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.IRepository.GetAll(System.Type,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.List{System.String},HS.MVCFramework.Framework.SortOrder)">
            <summary>
            条件查询对象列表
            </summary>
            <param name="entityType"></param>
            <param name="specification">查询条件字典</param>
            <returns></returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.IRepository.GetPaged(System.Type,System.Collections.Generic.Dictionary{System.String,System.String},System.Int32,System.Int32)">
            <summary>
            条件查询对象列表
            </summary>
            <param name="entityType"></param>
            <param name="specification">查询条件字典</param>
            <returns></returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.IRepository.GetPaged(System.Type,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.List{System.String},HS.MVCFramework.Framework.SortOrder,System.Int32,System.Int32)">
            <summary>
            条件查询对象列表
            </summary>
            <param name="entityType"></param>
            <param name="specification">查询条件字典</param>
            <returns></returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.IRepository.GetAll``1">
            <summary>
            从存储库中获取所有聚合的根。
            </summary>
            <returns>获取的所有聚合根</returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.IRepository.GetAll``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},HS.MVCFramework.Framework.SortOrder)">
             <summary>
            通过使用提供的排序谓词和指定的排序顺序进行排序,从存储库中获取所有聚合根。
             </summary>
             <param name="sortPredicate">排序字段。</param>
             <param name="sortOrder">排序方式</param>
             <returns>获取的所有聚合根</returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.IRepository.GetAll``1(HS.MVCFramework.Framework.ISpecification{``0})">
            <summary>
            通过使用给定的规范,从存储库中获取聚合根实例集合。
            </summary>
            <param name="specification">与聚合根匹配的规范</param>
            <returns>聚合根的实例集合.</returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.IRepository.GetAll``1(HS.MVCFramework.Framework.ISpecification{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},HS.MVCFramework.Framework.SortOrder)">
            <summary>
            通过使用提供的排序谓词和指定的排序顺序进行排序,从存储库中获取所有聚合根集合。
            </summary>
            <param name="specification">查询条件</param>
            <param name="sortPredicate">排序字段</param>
            <param name="sortOrder">排序方式</param>
            <returns>获取的所有聚合根集合</returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.IRepository.GetAll``1(HS.MVCFramework.Framework.ISpecification{``0},System.Collections.Generic.List{HS.MVCFramework.Framework.Orderby{``0}})">
            <summary>
            通过使用提供的排序谓词和指定的排序顺序进行排序,从存储库中获取所有聚合根集合。
            </summary>
            <param name="specification">查询条件</param>
            <param name="sortOrders">排序对象</param>
            <returns>获取的所有聚合根集合</returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.IRepository.GetPaged``1(System.Int32,System.Int32)">
             <summary>
            通过使用提供的排序谓词、指定的排序顺序和分页参数,从存储库中获取分页聚合根集合。
             </summary>
             <param name="pageIndex">页码</param>
             <param name="pageCount">页记录</param>
             <returns>获取的分页聚合根集合</returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.IRepository.GetPaged``1(System.Int32,System.Int32,HS.MVCFramework.Framework.ISpecification{``0})">
             <summary>
            通过使用提供的排序谓词、指定的排序顺序和分页参数,从存储库中获取分页聚合根集合。
             </summary>
             <param name="pageIndex">页码</param>
             <param name="pageCount">页记录</param>
             <param name="specification">查询条件</param>
             <returns>获取的分页聚合根集合</returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.IRepository.GetPaged``1(System.Int32,System.Int32,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},HS.MVCFramework.Framework.SortOrder)">
             <summary>
            通过使用提供的排序谓词、指定的排序顺序和分页参数,从存储库中获取分页聚合根集合。
             </summary>
             <param name="pageIndex">页码</param>
             <param name="pageCount">页记录</param>
             <param name="orderByExpression">排序字段</param>
             <param name="ascending">排序方式</param>
             <returns>获取的分页聚合根集合</returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.IRepository.GetPaged``1(System.Int32,System.Int32,HS.MVCFramework.Framework.ISpecification{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},HS.MVCFramework.Framework.SortOrder)">
             <summary>
            通过使用提供的排序谓词、指定的排序顺序和分页参数,从存储库中获取分页聚合根集合。
             </summary>
             <param name="pageIndex">页码</param>
             <param name="pageCount">页记录</param>
             <param name="specification">查询条件</param>
             <param name="orderByExpression">排序字段</param>
             <param name="ascending">排序方式</param>
             <returns>获取的分页聚合根集合</returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.IRepository.GetPaged``1(System.Int32,System.Int32,HS.MVCFramework.Framework.ISpecification{``0},System.Collections.Generic.List{HS.MVCFramework.Framework.Orderby{``0}})">
             <summary>
            通过使用提供的排序谓词、指定的排序顺序和分页参数,从存储库中获取分页聚合根集合。
             </summary>
             <param name="pageIndex">页码</param>
             <param name="pageCount">页记录</param>
             <param name="specification">查询条件</param>
             <param name="sortOrders">排序对象</param>
             <returns>获取的分页聚合根集合</returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.IRepository.GetCount``1(HS.MVCFramework.Framework.ISpecification{``0})">
            <summary>
            通过使用给定的规范,统计存储库中记录数。
            </summary>
            <param name="specification">查询条件</param>
            <returns>返回符合的记录数。</returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.IRepository.Exists``1(HS.MVCFramework.Framework.ISpecification{``0})">
            <summary>
            通过使用给定的规范,对比聚合根是否存在存储库中。
            </summary>
            <param name="specification">查询条件</param>
            <returns>如果聚合根存在，否则为 false，则为 true。</returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.IRepository.ExecuteString``1(System.String,System.Collections.Generic.List{System.Data.Common.DbParameter})">
            <summary>
            执行SQL，返回结果集。
            </summary>
            <typeparam name="TElement">结果集泛型</typeparam>
            <param name="sql">查询语句SQL</param>
            <param name="param">参数字典</param>
            <returns>返回执行SQL语句的结果集</returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.IRepository.ExecuteString(System.String,System.Collections.Generic.List{System.Data.Common.DbParameter})">
            <summary>
            执行SQL语句
            </summary>
            <param name="sql">查询语句SQL</param>
            <param name="param">参数字典</param>
            <returns>提供DataReader查询数据</returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.IRepository.ExecuteSqlCommand(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            执行SQL语句，像UPDATE ,DELETE 有执行行数的操作
            </summary>
            <param name="sql">
            <example>update table set field=@field0 where pkid=@id </example>
            </param>
            <param name="dict">
            <code>
            EF: new SqlParameter { ParameterName = "field0", Value = 1 }
            NH: key:字段名; value:数值
            </code>
            </param>
            <returns>返回受影响的行数</returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.IRepository.ExecuteScalar(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            从数据库中检索单个值(例如一个聚合值)
            </summary>
            <param name="queryString">查询语句SQL</param>
            <param name="dict">参数字典</param>
            <returns>返回结果集的第一行第一列</returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.IRepository.ExecuteProc``1(System.String,System.Object[])">
            <summary>
            执行存储过程
            </summary>
            <typeparam name="TElement">实体</typeparam>
            <param name="storedProcedureName">存储过程名称</param>
            <param name="param">IDbDataParameter参数</param>
            <returns>提供对存储过程的执行结果查询器</returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.IRepository.ExecuteProc``1(System.String,System.String[],System.Object[])">
            <summary>
            执行存储过程
            </summary>
            <typeparam name="TElement">实体</typeparam>
            <param name="procedureName">存储过程名称</param>
            <param name="paramNames">in参数名</param>
            <param name="paramValues">in参数值</param>
            <returns>提供对存储过程的执行结果查询器</returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.IRepository.ExecuteProc``1(System.String,System.String[],System.Object[],System.String[],System.Data.DbType[],System.Object[]@)">
            <summary>
            执行存储过程-带返回值
            </summary>
            <typeparam name="TElement">实体</typeparam>
            <param name="procedureName">存储过程名称</param>
            <param name="paramNames">in参数名</param>
            <param name="paramValues">in参数值</param>
            <param name="outParamNames">out参数名</param>
            <param name="outParamTypes">out参数类型</param>
            <param name="outParamResults">out传出对象</param>
            <returns>提供对存储过程的执行结果查询器</returns>
        </member>
        <!-- 对于成员“M:HS.MVCFramework.Framework.IRepository.SqlQuery``1(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})”忽略有格式错误的 XML 注释 -->
        <!-- 对于成员“M:HS.MVCFramework.Framework.IRepository.SqlQuery(System.Type,System.String,System.Collections.Generic.Dictionary{System.String,System.Object})”忽略有格式错误的 XML 注释 -->
        <member name="M:HS.MVCFramework.Framework.IRepository.Commit">
            <summary>
            提交事务
            </summary>
        </member>
        <member name="M:HS.MVCFramework.Framework.IRepository.Rollback">
            <summary>
            回滚事务
            </summary>
        </member>
        <member name="P:HS.MVCFramework.Framework.IRepository.CfgName">
            <summary>
            配置文件名
            </summary>
        </member>
        <member name="P:HS.MVCFramework.Framework.IRepository.SingletonMode">
            <summary>
            事务独占模式开启标识
            </summary>
        </member>
        <member name="P:HS.MVCFramework.Framework.IRepository.Connection">
            <summary>
            数据库的连接
            </summary>
        </member>
        <member name="P:HS.MVCFramework.Framework.IRepository.Committed">
            <summary>
            指示是否已提交
            </summary>
        </member>
        <member name="T:HS.MVCFramework.Framework.DatabaseSessionFactory">
            <summary>
            NHibernate会话工厂辅助类
            </summary>
        </member>
        <member name="F:HS.MVCFramework.Framework.DatabaseSessionFactory.sessionFactory">
            <summary>
            会话工厂实例
            </summary>
        </member>
        <member name="F:HS.MVCFramework.Framework.DatabaseSessionFactory.session">
            <summary>
            会话实例
            </summary>
        </member>
        <member name="M:HS.MVCFramework.Framework.DatabaseSessionFactory.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="configFileName">配置文件路径名称</param>
        </member>
        <member name="M:HS.MVCFramework.Framework.DatabaseSessionFactory.OpenSession">
            <summary>
            从会话工厂中创建一个新会话
            </summary>
            <returns>创建一个新会话</returns>
        </member>
        <member name="P:HS.MVCFramework.Framework.DatabaseSessionFactory.Session">
            <summary>
            Nhibernate会话实例，如果会话没有打开或创建，那么就会从会话工厂中创建一个新会话的。
            </summary>
        </member>
        <member name="M:HS.MVCFramework.Framework.NHContextAdapter.Add``1(``0)">
            <summary>
            新增记录
            </summary>
            <typeparam name="TAggregateRoot">聚合根实体泛型:必须继承IAggregateRoot</typeparam>
            <param name="aggregateRoot">聚合根实体：必须继承IAggregateRoot</param>
            <returns>返回聚合根实体主键</returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.NHContextAdapter.Add(HS.MVCFramework.Framework.AggregateRoot)">
            <summary>
            新增记录
            </summary>
            <param name="obj">实体</param>
            <returns>返回聚合根实体主键</returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.NHContextAdapter.Update``1(``0)">
            <summary>
            更新记录
            </summary>
            <typeparam name="TAggregateRoot">聚合根实体泛型：必须继承IAggregateRoot</typeparam>
            <param name="aggregateRoot">聚合根实体：必须继承IAggregateRoot</param>
        </member>
        <member name="M:HS.MVCFramework.Framework.NHContextAdapter.Update(HS.MVCFramework.Framework.AggregateRoot)">
            <summary>
            更新记录
            </summary>
            <param name="obj">聚合根实体：必须继承IAggregateRoot</param>
        </member>
        <member name="M:HS.MVCFramework.Framework.NHContextAdapter.Update(HS.MVCFramework.Framework.AggregateRoot,System.Boolean,System.Collections.Generic.List{System.String},System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            更新记录
            </summary>
            <param name="obj">数据实体</param>
            <param name="isUpdate">是否需要更新；若为true，则Parameters为需要更新的字段列表。若为false，则Parameters为不需要更新的字段列表</param>
            <param name="Parameters">字段参数列表</param>
            <param name="PrimarykeyValue">当前数据实体的主键键/值对</param>
        </member>
        <member name="M:HS.MVCFramework.Framework.NHContextAdapter.Update``1(HS.MVCFramework.Framework.AggregateRoot,System.String[],HS.MVCFramework.Framework.ISpecification{``0})">
            <summary>
            【谨慎】根据条件批量更新表记录
            </summary>
            <typeparam name="TAggregateRoot">实体类型</typeparam>
            <param name="updateValues">待更新的字段</param>
            <param name="specification">【谨慎】更新条件(不支持复杂条件)</param>
            <returns>返回生成的sql语句，提供检查是否正确</returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.NHContextAdapter.Delete``1(``0)">
            <summary>
            根据聚合根实体(的标识)删除
            </summary>
            <typeparam name="TAggregateRoot">聚合根实体泛型：必须继承IAggregateRoot</typeparam>
            <param name="aggregateRoot">聚合根实体</param>
        </member>
        <member name="M:HS.MVCFramework.Framework.NHContextAdapter.Delete(HS.MVCFramework.Framework.AggregateRoot)">
            <summary>
            根据实体对象(的标识)删除
            </summary>
            <param name="obj">聚合根实体</param>
        </member>
        <member name="M:HS.MVCFramework.Framework.NHContextAdapter.Get``1(System.Object)">
            <summary>
            通过主键返回对象
            </summary>
            <param name="id">主键值</param>
            <returns>聚合根实体</returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.NHContextAdapter.Get(System.Type,System.Object)">
            <summary>
            查询聚合根实体
            </summary>
            <param name="classzz">聚合根实体类型</param>
            <param name="key">主键值</param>
            <returns>聚合根实体</returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.NHContextAdapter.Get``1(HS.MVCFramework.Framework.ISpecification{``0})">
            <summary>
            通过使用给定的规范,从存储库中获取单个聚合根实例。
            </summary>
            <param name="specification">与聚合根匹配的规范。</param>
            <returns>聚合根的实例。</returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.NHContextAdapter.Get``1(HS.MVCFramework.Framework.ISpecification{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},HS.MVCFramework.Framework.SortOrder)">
            <summary>
            通过使用给定的规范,从存储库中获取单个聚合根实例(取得条件排序第一条)。
            </summary>
            <param name="specification">与聚合根匹配的规范。</param>
            <returns>聚合根的实例。</returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.NHContextAdapter.GetAll(System.Type,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            条件查询对象列表
            </summary>
            <param name="entityType"></param>
            <param name="specification">查询条件字典</param>
            <returns></returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.NHContextAdapter.GetAll(System.Type,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.List{System.String},HS.MVCFramework.Framework.SortOrder)">
            <summary>
            条件查询对象列表
            </summary>
            <param name="entityType"></param>
            <param name="specification">查询条件字典</param>
            <returns></returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.NHContextAdapter.GetPaged(System.Type,System.Collections.Generic.Dictionary{System.String,System.String},System.Int32,System.Int32)">
            <summary>
            条件查询对象列表
            </summary>
            <param name="entityType"></param>
            <param name="specification">查询条件字典</param>
            <returns></returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.NHContextAdapter.GetPaged(System.Type,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.List{System.String},HS.MVCFramework.Framework.SortOrder,System.Int32,System.Int32)">
            <summary>
            条件查询对象列表
            </summary>
            <param name="entityType"></param>
            <param name="specification">查询条件字典</param>
            <returns></returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.NHContextAdapter.GetAll``1">
            <summary>
            从存储库中获取所有聚合的根。
            </summary>
            <returns>获取的所有聚合根</returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.NHContextAdapter.GetAll``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},HS.MVCFramework.Framework.SortOrder)">
             <summary>
            通过使用提供的排序谓词和指定的排序顺序进行排序,从存储库中获取所有聚合根。
             </summary>
             <param name="sortPredicate">排序字段。</param>
             <param name="sortOrder">排序方式</param>
             <returns>获取的所有聚合根</returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.NHContextAdapter.GetAll``1(HS.MVCFramework.Framework.ISpecification{``0})">
            <summary>
            通过使用给定的规范,从存储库中获取聚合根实例集合。
            </summary>
            <param name="specification">与聚合根匹配的规范</param>
            <returns>聚合根的实例集合.</returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.NHContextAdapter.GetAll``1(HS.MVCFramework.Framework.ISpecification{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},HS.MVCFramework.Framework.SortOrder)">
            <summary>
            通过使用提供的排序谓词和指定的排序顺序进行排序,从存储库中获取所有聚合根集合。
            </summary>
            <param name="specification">查询条件</param>
            <param name="sortPredicate">排序字段</param>
            <param name="sortOrder">排序方式</param>
            <returns>获取的所有聚合根集合</returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.NHContextAdapter.GetAll``1(HS.MVCFramework.Framework.ISpecification{``0},System.Collections.Generic.List{HS.MVCFramework.Framework.Orderby{``0}})">
            <summary>
            通过使用提供的排序谓词和指定的排序顺序进行排序,从存储库中获取所有聚合根集合。
            </summary>
            <param name="specification">查询条件</param>
            <param name="sortOrders">排序对象</param>
            <returns>获取的所有聚合根集合</returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.NHContextAdapter.GetPaged``1(System.Int32,System.Int32)">
             <summary>
            通过使用提供的排序谓词、指定的排序顺序和分页参数,从存储库中获取分页聚合根集合。
             </summary>
             <param name="pageIndex">页码</param>
             <param name="pageCount">页记录</param>
             <returns>获取的分页聚合根集合</returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.NHContextAdapter.GetPaged``1(System.Int32,System.Int32,HS.MVCFramework.Framework.ISpecification{``0})">
             <summary>
            通过使用提供的排序谓词、指定的排序顺序和分页参数,从存储库中获取分页聚合根集合。
             </summary>
             <param name="pageIndex">页码</param>
             <param name="pageCount">页记录</param>
             <param name="specification">查询条件</param>
             <returns>获取的分页聚合根集合</returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.NHContextAdapter.GetPaged``1(System.Int32,System.Int32,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},HS.MVCFramework.Framework.SortOrder)">
             <summary>
            通过使用提供的排序谓词、指定的排序顺序和分页参数,从存储库中获取分页聚合根集合。
             </summary>
             <param name="pageIndex">页码</param>
             <param name="pageCount">页记录</param>
             <param name="orderByExpression">排序字段</param>
             <param name="ascending">排序方式</param>
             <returns>获取的分页聚合根集合</returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.NHContextAdapter.GetPaged``1(System.Int32,System.Int32,HS.MVCFramework.Framework.ISpecification{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},HS.MVCFramework.Framework.SortOrder)">
             <summary>
            通过使用提供的排序谓词、指定的排序顺序和分页参数,从存储库中获取分页聚合根集合。
             </summary>
             <param name="pageIndex">页码</param>
             <param name="pageCount">页记录</param>
             <param name="specification">查询条件</param>
             <param name="orderByExpression">排序字段</param>
             <param name="ascending">排序方式</param>
             <returns>获取的分页聚合根集合</returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.NHContextAdapter.GetPaged``1(System.Int32,System.Int32,HS.MVCFramework.Framework.ISpecification{``0},System.Collections.Generic.List{HS.MVCFramework.Framework.Orderby{``0}})">
             <summary>
            通过使用提供的排序谓词、指定的排序顺序和分页参数,从存储库中获取分页聚合根集合。
             </summary>
             <param name="pageIndex">页码</param>
             <param name="pageCount">页记录</param>
             <param name="specification">查询条件</param>
             <param name="sortOrders">排序对象</param>
             <returns>获取的分页聚合根集合</returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.NHContextAdapter.GetCount``1(HS.MVCFramework.Framework.ISpecification{``0})">
            <summary>
            通过使用给定的规范,统计存储库中记录数。
            </summary>
            <param name="specification">查询条件</param>
            <returns>返回符合的记录数。</returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.NHContextAdapter.Exists``1(HS.MVCFramework.Framework.ISpecification{``0})">
            <summary>
            通过使用给定的规范,对比聚合根是否存在存储库中。
            </summary>
            <param name="specification">查询条件</param>
            <returns>如果聚合根存在，否则为 false，则为 true。</returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.NHContextAdapter.ExecuteString``1(System.String,System.Collections.Generic.List{System.Data.Common.DbParameter})">
            <summary>
            执行SQL，返回结果集。
            </summary>
            <typeparam name="TElement">结果集泛型</typeparam>
            <param name="sql">查询语句SQL</param>
            <param name="param">参数字典</param>
            <returns>返回执行SQL语句的结果集</returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.NHContextAdapter.ExecuteString(System.String,System.Collections.Generic.List{System.Data.Common.DbParameter})">
            <summary>
            根据SQL查询，返回Reader对象（记得使用后要关闭Reader.例如：using(var reader = db.ExecuteString()) )
            </summary>
            <param name="sql"></param>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.NHContextAdapter.ExecuteSqlCommand(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            执行SQL语句，像UPDATE ,DELETE 有执行行数的操作
            </summary>
            <param name="sql">
            <example>update table set field=@field0 where pkid=@id </example>
            </param>
            <param name="dict">
            <code>
            EF: new SqlParameter { ParameterName = "field0", Value = 1 }
            NH: key:字段名; value:数值
            </code>
            </param>
            <returns>返回受影响的行数</returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.NHContextAdapter.ExecuteProc``1(System.String,System.Object[])">
            <summary>
            执行存储过程
            </summary>
            <typeparam name="TElement">实体</typeparam>
            <param name="procedureName">存储过程名称</param>
            <param name="param">IDbDataParameter参数</param>
            <returns>提供对存储过程的执行结果查询器</returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.NHContextAdapter.ExecuteProc``1(System.String,System.String[],System.Object[])">
            <summary>
            执行存储过程
            </summary>
            <typeparam name="TElement">实体</typeparam>
            <param name="procedureName">存储过程名称</param>
            <param name="paramNames">in参数名</param>
            <param name="paramValues">in参数值</param>
            <returns>提供对存储过程的执行结果查询器</returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.NHContextAdapter.ExecuteProc``1(System.String,System.String[],System.Object[],System.String[],System.Data.DbType[],System.Object[]@)">
            <summary>
            执行存储过程-带返回值
            </summary>
            <typeparam name="TElement">实体</typeparam>
            <param name="procedureName">存储过程名称</param>
            <param name="paramNames">in参数名</param>
            <param name="paramValues">in参数值</param>
            <param name="outParamNames">out参数名</param>
            <param name="outParamTypes">out参数类型</param>
            <param name="outParamResults">out传出对象</param>
            <returns>提供对存储过程的执行结果查询器</returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.NHContextAdapter.ExecuteScalar(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            从数据库中检索单个值(例如一个聚合值)
            </summary>
            <param name="queryString">查询语句SQL</param>
            <param name="dict">参数字典</param>
            <returns>返回结果集的第一行第一列</returns>
        </member>
        <!-- 对于成员“M:HS.MVCFramework.Framework.NHContextAdapter.SqlQuery``1(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})”忽略有格式错误的 XML 注释 -->
        <!-- 对于成员“M:HS.MVCFramework.Framework.NHContextAdapter.SqlQuery(System.Type,System.String,System.Collections.Generic.Dictionary{System.String,System.Object})”忽略有格式错误的 XML 注释 -->
        <member name="M:HS.MVCFramework.Framework.NHContextAdapter.AsQueryable``1">
            <summary>
            提供对数据类型TAggregateRoot已知的特定数据源的查询进行计算的功能
            </summary>
            <typeparam name="TAggregateRoot">聚合根实体泛型</typeparam>
            <returns>提供对聚合根的查询操作</returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.NHContextAdapter.AsQueryOver``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            提供对数据类型TAggregateRoot已知的特定数据源的查询进行计算的功能,只能在NHibernate中使用
            </summary>
            <typeparam name="TAggregateRoot">聚合根实体泛型</typeparam>
            <returns>提供对聚合根的查询操作</returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.NHContextAdapter.AsQueryOver``1">
            <summary>
            提供对数据类型TAggregateRoot已知的特定数据源的查询进行计算的功能,只能在NHibernate中使用
            </summary>
            <typeparam name="TAggregateRoot">聚合根实体泛型</typeparam>
            <returns>提供对聚合根的查询操作</returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.NHContextAdapter.Commit">
            <summary>
            提交事务内上下文所有内容
            </summary>
        </member>
        <member name="M:HS.MVCFramework.Framework.NHContextAdapter.Dispose(System.Boolean)">
            <summary>
            实例释放的同时，会将会话Session关闭。
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:HS.MVCFramework.Framework.NHContextAdapter.ExplicitDispose">
            <summary>
            强制销毁，并执行GC回收
            </summary>
        </member>
        <member name="M:HS.MVCFramework.Framework.NHContextAdapter.Dispose">
            <summary>
            销毁对象
            </summary>
        </member>
        <member name="P:HS.MVCFramework.Framework.NHContextAdapter.SingletonMode">
            <summary>
            事务独占模式开启标识
            </summary>
        </member>
        <member name="P:HS.MVCFramework.Framework.NHContextAdapter.Session">
            <summary>
            NHibernate数据库访问会话
            </summary>
        </member>
        <member name="P:HS.MVCFramework.Framework.NHContextAdapter.Committed">
            <summary>
            指示事务是否提交
            </summary>
        </member>
        <member name="T:HS.MVCFramework.Framework.OperationType">
            <summary>
            操作类型
            </summary>
        </member>
        <member name="F:HS.MVCFramework.Framework.OperationType.Insert">
            <summary>
            新增
            </summary>
        </member>
        <member name="F:HS.MVCFramework.Framework.OperationType.Update">
             <summary>
            修改
             </summary>
        </member>
        <member name="F:HS.MVCFramework.Framework.OperationType.Delete">
            <summary>
            删除
            </summary>
        </member>
        <member name="F:HS.MVCFramework.Framework.OperationType.None">
            <summary>
            无任何操作
            </summary>
        </member>
        <member name="T:HS.MVCFramework.Framework.PartialEvaluator">
             <summary>
            重写一个表达示树,并将其中引用变量转换成常量
            去除所附加的类信息
             </summary>
        </member>
        <!-- 对于成员“M:HS.MVCFramework.Framework.PartialEvaluator.Eval(System.Linq.Expressions.Expression)”忽略有格式错误的 XML 注释 -->
        <!-- 对于成员“M:HS.MVCFramework.Framework.PartialEvaluator.Eval(System.Linq.Expressions.Expression,System.Func{System.Linq.Expressions.Expression,System.Boolean})”忽略有格式错误的 XML 注释 -->
        <!-- 对于成员“T:HS.MVCFramework.Framework.PartialEvaluator.SubtreeEvaluator”忽略有格式错误的 XML 注释 -->
        <member name="T:HS.MVCFramework.Framework.PartialEvaluator.Nominator">
            <summary>
            Performs bottom-up analysis to determine which nodes can possibly
            be part of an evaluated sub-tree.
            </summary>
        </member>
        <member name="T:HS.MVCFramework.Framework.AiTypeHelper">
            <summary>
            类型关系帮助方法
            </summary>
        </member>
        <member name="T:HS.MVCFramework.Framework.AiReflectionExtensions">
            <summary>
            成员反射操作
            </summary>
        </member>
        <member name="T:HS.MVCFramework.Framework.SortOrder">
             <summary>
            排序方式
             </summary>
        </member>
        <member name="F:HS.MVCFramework.Framework.SortOrder.Unspecified">
            <summary>
            指示未指定排序样式。
            </summary>
        </member>
        <member name="F:HS.MVCFramework.Framework.SortOrder.Ascending">
            <summary>
            指示按升序排序。
            </summary>
        </member>
        <member name="F:HS.MVCFramework.Framework.SortOrder.Descending">
            <summary>
            指示按降序排序。
            </summary>
        </member>
        <member name="T:HS.MVCFramework.Framework.AndSpecification`1">
            <summary>
            代表一个条件And运算
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
        </member>
        <member name="T:HS.MVCFramework.Framework.CompositeSpecification`1">
            <summary>
            代表复合规约的基类
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
        </member>
        <member name="T:HS.MVCFramework.Framework.Specification`1">
            <summary>
            条件规约抽象类
            </summary>
            <typeparam name="TEntity">域实体</typeparam>
        </member>
        <member name="T:HS.MVCFramework.Framework.ISpecification`1">
            <summary>
            条件规约接口
            </summary>
            <typeparam name="TEntity">域实体</typeparam>
        </member>
        <member name="M:HS.MVCFramework.Framework.ISpecification`1.SatisfiedBy">
            <summary>
            获取条件规约的表达式树
            </summary>
            <returns>条件规约的表达式树</returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.ISpecification`1.And(HS.MVCFramework.Framework.ISpecification{`0})">
            <summary>
            使用And连接俩个规约
            </summary>
            <param name="other">待连接的规约</param>
            <returns>返回连接后的规约</returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.ISpecification`1.Or(HS.MVCFramework.Framework.ISpecification{`0})">
            <summary>
            使用Or连接俩个规约
            </summary>
            <param name="other">待连接的规约</param>
            <returns>返回连接后的规约</returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.ISpecification`1.Not">
            <summary>
            使用Not否定规约
            </summary>
            <returns>使用Not否定规约</returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.Specification`1.Create(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            创建一个条件规约
            </summary>
            <param name="expression">规约的表达式</param>
            <returns>创建后的条件规约</returns>
        </member>
        <!-- 对于成员“M:HS.MVCFramework.Framework.Specification`1.op_BitwiseAnd(HS.MVCFramework.Framework.Specification{`0},HS.MVCFramework.Framework.Specification{`0})”忽略有格式错误的 XML 注释 -->
        <member name="M:HS.MVCFramework.Framework.Specification`1.op_BitwiseOr(HS.MVCFramework.Framework.Specification{`0},HS.MVCFramework.Framework.Specification{`0})">
            <summary>
            重载|连接符号，实现俩个条件规约的Or连接
            </summary>
            <param name="leftSideSpecification">第一个条件规约</param>
            <param name="rightSideSpecification">第二个条件规约</param>
            <returns>Or连接后的条件规约</returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.Specification`1.op_LogicalNot(HS.MVCFramework.Framework.Specification{`0})">
            <summary>
            重载!连接符号，实现俩个条件规约的非连接
            </summary>
            <param name="specification">条件规约</param>
            <returns>非操作后的条件规约</returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.Specification`1.op_False(HS.MVCFramework.Framework.Specification{`0})">
            <summary>
            [本方法未实现]重载false连接符号，实现俩个条件规约的Or连接
            </summary>
            <param name="specification">条件规约</param>
            <returns>false操作后的条件规约</returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.Specification`1.op_True(HS.MVCFramework.Framework.Specification{`0})">
            <summary>
            [本方法未实现]重载true连接符号，实现俩个条件规约的Or连接
            </summary>
            <param name="specification">条件规约</param>
            <returns>true操作后的条件规约</returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.Specification`1.SatisfiedBy">
            <summary>
            获取条件规约的表达式树
            </summary>
            <returns>条件规约的表达式树</returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.Specification`1.And(HS.MVCFramework.Framework.ISpecification{`0})">
            <summary>
            使用And连接俩个规约
            </summary>
            <param name="other">待连接的规约</param>
            <returns>返回连接后的规约</returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.Specification`1.Or(HS.MVCFramework.Framework.ISpecification{`0})">
            <summary>
            使用Or连接俩个规约
            </summary>
            <param name="other">待连接的规约</param>
            <returns>返回连接后的规约</returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.Specification`1.Not">
            <summary>
            使用Not否定规约
            </summary>
            <returns>使用Not否定规约</returns>
        </member>
        <member name="P:HS.MVCFramework.Framework.CompositeSpecification`1.LeftSideSpecification">
            <summary>
            复合规约的左边规约
            </summary>
        </member>
        <member name="P:HS.MVCFramework.Framework.CompositeSpecification`1.RightSideSpecification">
            <summary>
            复合规约的右边规约
            </summary>
        </member>
        <member name="M:HS.MVCFramework.Framework.AndSpecification`1.#ctor(HS.MVCFramework.Framework.ISpecification{`0},HS.MVCFramework.Framework.ISpecification{`0})">
            <summary>
            构造函数
            </summary>
            <param name="leftSide">左边规约</param>
            <param name="rightSide">右边规约</param>
        </member>
        <member name="M:HS.MVCFramework.Framework.AndSpecification`1.SatisfiedBy">
            <summary>
            满足条件的Lambda表达
            </summary>
            <returns>满足条件的Lambda表达</returns>
        </member>
        <member name="P:HS.MVCFramework.Framework.AndSpecification`1.LeftSideSpecification">
             <summary>
            左边规约
             </summary>
        </member>
        <member name="P:HS.MVCFramework.Framework.AndSpecification`1.RightSideSpecification">
            <summary>
            右边规约
            </summary>
        </member>
        <member name="T:HS.MVCFramework.Framework.DirectSpecification`1">
            <summary>
            A Direct Specification is a simple implementation
            of specification that acquire this from a lambda expression
            in  constructor
            </summary>
            <typeparam name="TValueObject">Type of entity that check this specification</typeparam>
        </member>
        <member name="M:HS.MVCFramework.Framework.DirectSpecification`1.#ctor(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Default constructor for Direct Specification
            </summary>
            <param name="matchingCriteria">A Matching Criteria</param>
        </member>
        <member name="M:HS.MVCFramework.Framework.DirectSpecification`1.SatisfiedBy">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:HS.MVCFramework.Framework.ExpressionBuilder">
            <summary>
            Extension methods for adding AND and OR with parameters rebinder
            </summary>
        </member>
        <member name="M:HS.MVCFramework.Framework.ExpressionBuilder.Compose``1(System.Linq.Expressions.Expression{``0},System.Linq.Expressions.Expression{``0},System.Func{System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression})">
            <summary>
            Compose two expressions and merge all in a new expression
            </summary>
            <typeparam name="T">Type of params in expression</typeparam>
            <param name="first">Expression instance</param>
            <param name="second">Expression to merge</param>
            <param name="merge">Function to merge</param>
            <returns>New merged expression</returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.ExpressionBuilder.And``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            And operator
            </summary>
            <typeparam name="T">Type of params in expression</typeparam>
            <param name="first">Right Expression in AND operation</param>
            <param name="second">Left Expression in And operation</param>
            <returns>New AND expression</returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.ExpressionBuilder.Or``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Or operator
            </summary>
            <typeparam name="T">Type of param in expression</typeparam>
            <param name="first">Right expression in OR operation</param>
            <param name="second">Left expression in OR operation</param>
            <returns>New Or expressions</returns>
        </member>
        <member name="T:HS.MVCFramework.Framework.NotSpecification`1">
            <summary>
            NotEspecification convert a original
            specification with NOT logic operator
            </summary>
            <typeparam name="TValueObject">Type of element for this specificaiton</typeparam>
        </member>
        <member name="M:HS.MVCFramework.Framework.NotSpecification`1.#ctor(HS.MVCFramework.Framework.ISpecification{`0})">
            <summary>
            Constructor for NotSpecificaiton
            </summary>
            <param name="originalSpecification">Original specification</param>
        </member>
        <member name="M:HS.MVCFramework.Framework.NotSpecification`1.#ctor(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Constructor for NotSpecification
            </summary>
            <param name="originalSpecification">Original specificaiton</param>
        </member>
        <member name="M:HS.MVCFramework.Framework.NotSpecification`1.SatisfiedBy">
            <summary>
            <see cref="T:HS.MVCFramework.Framework.ISpecification`1"/>
            </summary>
            <returns><see cref="T:HS.MVCFramework.Framework.ISpecification`1"/></returns>
        </member>
        <member name="T:HS.MVCFramework.Framework.OrSpecification`1">
            <summary>
            A Logic OR Specification
            </summary>
            <typeparam name="T">Type of entity that check this specification</typeparam>
        </member>
        <member name="M:HS.MVCFramework.Framework.OrSpecification`1.#ctor(HS.MVCFramework.Framework.ISpecification{`0},HS.MVCFramework.Framework.ISpecification{`0})">
            <summary>
            Default constructor for AndSpecification
            </summary>
            <param name="leftSide">Left side specification</param>
            <param name="rightSide">Right side specification</param>
        </member>
        <member name="M:HS.MVCFramework.Framework.OrSpecification`1.SatisfiedBy">
            <summary>
            <see cref="T:HS.MVCFramework.Framework.ISpecification`1"/>
            </summary>
            <returns><see cref="T:HS.MVCFramework.Framework.ISpecification`1"/></returns>
        </member>
        <member name="P:HS.MVCFramework.Framework.OrSpecification`1.LeftSideSpecification">
            <summary>
            Left side specification
            </summary>
        </member>
        <member name="P:HS.MVCFramework.Framework.OrSpecification`1.RightSideSpecification">
            <summary>
            Righ side specification
            </summary>
        </member>
        <member name="T:HS.MVCFramework.Framework.ParameterRebinder">
            <summary>
            Helper for rebinder parameters without use Invoke method in expressions 
            ( this methods is not supported in all linq query providers, 
            for example in Linq2Entities is not supported)
            </summary>
        </member>
        <member name="M:HS.MVCFramework.Framework.ParameterRebinder.#ctor(System.Collections.Generic.Dictionary{System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.ParameterExpression})">
            <summary>
            Default construcotr
            </summary>
            <param name="map">Map specification</param>
        </member>
        <member name="M:HS.MVCFramework.Framework.ParameterRebinder.ReplaceParameters(System.Collections.Generic.Dictionary{System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression)">
            <summary>
            Replate parameters in expression with a Map information
            </summary>
            <param name="map">Map information</param>
            <param name="exp">Expression to replace parameters</param>
            <returns>Expression with parameters replaced</returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.ParameterRebinder.VisitParameter(System.Linq.Expressions.ParameterExpression)">
            <summary>
            Visit pattern method
            </summary>
            <param name="p">A Parameter expression</param>
            <returns>New visited expression</returns>
        </member>
        <member name="T:HS.MVCFramework.Framework.TrueSpecification`1">
            <summary>
            True specification
            </summary>
            <typeparam name="TValueObject">Type of entity in this specification</typeparam>
        </member>
        <member name="M:HS.MVCFramework.Framework.TrueSpecification`1.SatisfiedBy">
            <summary>
            <see cref="T:HS.MVCFramework.Framework.Specification`1"/>
            </summary>
            <returns><see cref="T:HS.MVCFramework.Framework.Specification`1"/></returns>
        </member>
        <member name="T:HS.MVCFramework.Framework.ILogger">
            <summary>
            日志容器接口
            </summary>
        </member>
        <member name="M:HS.MVCFramework.Framework.ILogger.Track(HS.MVCFramework.Framework.LogItemModel)">
            <summary>
            痕迹日志，用户操作以操作引起的流转
            </summary>
            <param name="log"></param>
        </member>
        <member name="M:HS.MVCFramework.Framework.ILogger.Info(HS.MVCFramework.Framework.LogItemModel)">
            <summary>
            信息日志，记录方法调用信息完成情况信息
            </summary>
            <param name="log"></param>
        </member>
        <member name="M:HS.MVCFramework.Framework.ILogger.Error(HS.MVCFramework.Framework.LogItemModel)">
            <summary>
            错误日志，记录系统异常与业务异常信息
            </summary>
            <param name="log"></param>
        </member>
        <member name="M:HS.MVCFramework.Framework.ILogger.Data(HS.MVCFramework.Framework.LogItemModel)">
            <summary>
            数据日志，需要记录业务数据修改过程的数据
            </summary>
            <param name="log"></param>
        </member>
        <member name="M:HS.MVCFramework.Framework.ILogger.Warning(HS.MVCFramework.Framework.LogItemModel)">
            <summary>
            警告日志，不影响系统与业务完成的不正常信息
            </summary>
            <param name="log"></param>
        </member>
        <member name="M:HS.MVCFramework.Framework.ILogger.Debug(HS.MVCFramework.Framework.LogItemModel)">
            <summary>
            调试日志，协助开发人员调试检查程序的日志信息
            </summary>
            <param name="log"></param>
        </member>
        <member name="M:HS.MVCFramework.Framework.ILogger.Fatal(HS.MVCFramework.Framework.LogItemModel)">
            <summary>
            致命日志，系统发生致命错误时的日志信息，如内存溢出。
            </summary>
            <param name="log"></param>
        </member>
        <member name="T:HS.MVCFramework.Framework.ILoggerFactory">
            <summary>
            日志容器工厂接口
            </summary>
        </member>
        <member name="M:HS.MVCFramework.Framework.ILoggerFactory.Create">
            <summary>
            Create a new ILog
            </summary>
            <returns>The ILog created</returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.ILoggerFactory.Create(System.String)">
            <summary>
            根据名称获得日志容器
            </summary>
            <param name="name">日志容器名称</param>
            <returns></returns>
        </member>
        <member name="T:HS.MVCFramework.Framework.LogArchiveModel">
            <summary>
            归档日志
            </summary>
        </member>
        <member name="P:HS.MVCFramework.Framework.LogArchiveModel.ID">
            <summary>
            键
            </summary>
        </member>
        <member name="P:HS.MVCFramework.Framework.LogArchiveModel.ArchiveLogType">
            <summary>
            日志种类(Trace-痕迹,Data-数据日志,Error-错误,Warning-警告,Info-信息,Debug-调试,Fatal-致命)
            </summary>
        </member>
        <member name="P:HS.MVCFramework.Framework.LogArchiveModel.ArchiveLogTime">
            <summary>
            记录时间
            </summary>
        </member>
        <member name="P:HS.MVCFramework.Framework.LogArchiveModel.ArchiveModule">
            <summary>
            模块
            </summary>
        </member>
        <member name="P:HS.MVCFramework.Framework.LogArchiveModel.ArchiveClassName">
            <summary>
            类名称
            </summary>
        </member>
        <member name="P:HS.MVCFramework.Framework.LogArchiveModel.ArchiveMethodName">
            <summary>
            方法名称
            </summary>
        </member>
        <member name="P:HS.MVCFramework.Framework.LogArchiveModel.ArchiveOperaterId">
            <summary>
            操作人ID
            </summary>
        </member>
        <member name="P:HS.MVCFramework.Framework.LogArchiveModel.ArchiveOperaterName">
            <summary>
            操作人名称
            </summary>
        </member>
        <member name="P:HS.MVCFramework.Framework.LogArchiveModel.ArchiveException">
            <summary>
            异常错误栈信息
            </summary>
        </member>
        <member name="P:HS.MVCFramework.Framework.LogArchiveModel.ArchiveDataString">
            <summary>
            业务数据（实体对象，数据日志使用,格式为JSON)
            </summary>
        </member>
        <member name="P:HS.MVCFramework.Framework.LogArchiveModel.ArchiveMessage">
            <summary>
            信息
            </summary>
        </member>
        <member name="P:HS.MVCFramework.Framework.LogArchiveModel.ArchiveIPAddress">
            <summary>
            IP地址
            </summary>
        </member>
        <member name="P:HS.MVCFramework.Framework.LogArchiveModel.ArchiveDate">
            <summary>
            归档日期
            </summary>
        </member>
        <member name="T:HS.MVCFramework.Framework.LoggerFactory">
            <summary>
            日志容器工厂
            </summary>
        </member>
        <member name="M:HS.MVCFramework.Framework.LoggerFactory.Init(System.Collections.Generic.Dictionary{HS.MVCFramework.Framework.LoggingType,HS.MVCFramework.Framework.ILoggerFactory})">
            <summary>
            装载工厂列表
            </summary>
            <param name="logFactory">日志工厂列表</param>
        </member>
        <member name="M:HS.MVCFramework.Framework.LoggerFactory.CreateLog(HS.MVCFramework.Framework.LoggingType)">
            <summary>
            创造一个新的日志容器 <paramref name="Microsoft.Samples.NLayerApp.Infrastructure.Crosscutting.Logging.ILog"/>
            </summary>
            <param name="loggingType">日志类型</param>
            <returns>返回日志容器</returns>
        </member>
        <member name="M:HS.MVCFramework.Framework.LoggerFactory.CreateLog(HS.MVCFramework.Framework.LoggingType,System.String)">
             <summary>
            创造一个新的日志容器  <paramref name="Microsoft.Samples.NLayerApp.Infrastructure.Crosscutting.Logging.ILog"/>
             </summary>
             <param name="loggingType">日志类型</param>
             <param name="name">日志容器名称</param>
             <returns>返回日志容器</returns>
        </member>
        <member name="T:HS.MVCFramework.Framework.LoggingType">
            <summary>
            日志类型
            </summary>
        </member>
        <member name="F:HS.MVCFramework.Framework.LoggingType.Text">
            <summary>
            文本记录
            </summary>
        </member>
        <member name="F:HS.MVCFramework.Framework.LoggingType.TraceSource">
            <summary>
            系统跟踪日志
            </summary>
        </member>
        <member name="F:HS.MVCFramework.Framework.LoggingType.Sqlite">
            <summary>
            sqlite存储
            </summary>
        </member>
        <member name="F:HS.MVCFramework.Framework.LoggingType.AppDatabase">
            <summary>
            应用数据库
            </summary>
        </member>
        <member name="F:HS.MVCFramework.Framework.LoggingType.Nosql">
            <summary>
            nosql存储
            </summary>
        </member>
        <member name="T:HS.MVCFramework.Framework.LogItemModel">
            <summary>
            日志项目模型
            </summary>
        </member>
        <member name="P:HS.MVCFramework.Framework.LogItemModel.ID">
            <summary>
            键
            </summary>
        </member>
        <member name="P:HS.MVCFramework.Framework.LogItemModel.LogType">
            <summary>
            日志种类(Trace-痕迹,Data-数据日志,Error-错误,Warning-警告,Info-信息,Debug-调试,Fatal-致命)
            </summary>
        </member>
        <member name="P:HS.MVCFramework.Framework.LogItemModel.LogTime">
            <summary>
            记录时间
            </summary>
        </member>
        <member name="P:HS.MVCFramework.Framework.LogItemModel.Module">
            <summary>
            模块
            </summary>
        </member>
        <member name="P:HS.MVCFramework.Framework.LogItemModel.ClassName">
            <summary>
            类名称
            </summary>
        </member>
        <member name="P:HS.MVCFramework.Framework.LogItemModel.MethodName">
            <summary>
            方法名称
            </summary>
        </member>
        <member name="P:HS.MVCFramework.Framework.LogItemModel.OperaterId">
            <summary>
            操作人ID
            </summary>
        </member>
        <member name="P:HS.MVCFramework.Framework.LogItemModel.OperaterName">
            <summary>
            操作人名称
            </summary>
        </member>
        <member name="P:HS.MVCFramework.Framework.LogItemModel.Exception">
            <summary>
            异常错误栈信息
            </summary>
        </member>
        <member name="P:HS.MVCFramework.Framework.LogItemModel.DataString">
            <summary>
            业务数据（实体对象，数据日志使用,格式为JSON)
            </summary>
        </member>
        <member name="P:HS.MVCFramework.Framework.LogItemModel.Message">
            <summary>
            信息
            </summary>
        </member>
        <member name="P:HS.MVCFramework.Framework.LogItemModel.IPAddress">
            <summary>
            IP地址
            </summary>
        </member>
        <member name="T:HS.MVCFramework.Framework.LogType">
            <summary>
            日志种类
            </summary>
        </member>
        <member name="F:HS.MVCFramework.Framework.LogType.Trace">
            <summary>
            操作痕迹
            </summary>
        </member>
        <member name="F:HS.MVCFramework.Framework.LogType.Info">
            <summary>
            信息
            </summary>
        </member>
        <member name="F:HS.MVCFramework.Framework.LogType.Warning">
            <summary>
            警告
            </summary>
        </member>
        <member name="F:HS.MVCFramework.Framework.LogType.Error">
            <summary>
            错误
            </summary>
        </member>
        <member name="F:HS.MVCFramework.Framework.LogType.Debug">
            <summary>
            调试
            </summary>
        </member>
        <member name="F:HS.MVCFramework.Framework.LogType.Data">
            <summary>
            数据
            </summary>
        </member>
        <member name="F:HS.MVCFramework.Framework.LogType.Fatal">
            <summary>
            致命
            </summary>
        </member>
    </members>
</doc>
